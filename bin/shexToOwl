#!/usr/bin/env node

// shexToOwl http://tracker.example/schemas/Issue.shex

const fs = require('fs')
let ShEx = require('shex')
let ShExToOwl = require('../lib/ShExToOwl')

// Generate command line interface
var CLI = require("command-line-args")([
    { name: "help",  alias: "h", type: Boolean },
    { name: "shex",  alias: "x", type: String, multiple:  true, defaultValue: [], defaultOption:  true },
    { name: "json",  alias: "j", type: String, multiple:  true, defaultValue: [] },
    { name: "prefix",alias: "p", type: String, multiple:  true, defaultValue: [] },
    { name: "append",            type: String, multiple:  true, defaultValue: [] },
    // { name: "prefix",alias: "p", type: String, multiple: true
]);
function abort (msg) {
  console.error(msg);
  if (false)
  console.error(CLI.getUsage({
    title: "shexToOwl",
    description: "load some number of schema files from web or filesystem and display as JSON (ShExJ), for example:\n    shexToOwl http://tracker.example/schemas/Issue.shex",
    footer: "Project home: [underline]{https://github.com/shexSpec/shex.js}"
  }));
  process.exit(1);
}

// Extract user commands
if (CLI.help)
    abort("");
if (CLI.shex.length === 0 && CLI.json.length === 0) abort("no shex specified");
let prefixMap = CLI.prefix.map(
  pair => {
    let m = pair.match(/^([^:]*):\s*(.*)$/)
    if (!m) { throw Error('--prefix argument didn\'t lead with viable prefix: ' + pair) }
    return { prefix: m[1], url: m[2] }
  }
)

ShEx.Loader.load(CLI.shex, CLI.json, [], []).then(function (loaded) {
  let errors = {}
  console.log('%s', ShExToOwl(loaded.schema, {
    source: {
      resource: CLI.shex.concat(CLI.json).join(', '),
      method: 'shexToOwl',
      timestamp: new Date().toISOString()
    },
    shorten: CLI.shorten,
    prefixMap: prefixMap,
    suppressDuplicateClasses: true,
    append: CLI.append.map(
      filepath => fs.readFileSync(filepath, 'UTF-8')
    ).join(''),
    errors: errors
  }).owlx);
  if ('untyped' in errors) {
    Object.keys(errors.untyped).forEach(badP => {
      let rec = errors.untyped[badP]
      console.warn(`${rec.shapeLabel} ${rec.predicate} :\n  ${rec.newType} isn\'t related to ${rec.curType}\n  ${rec.references.length} later references:`)
      rec.references.forEach(ref => {
        console.warn(`  ${ref.shapeLabel} : ${ref.newType}`)
      })
    })
  }
}).catch(function (e) {
  console.error("aborting:", e.stack || e);
  process.exit(1);
})
