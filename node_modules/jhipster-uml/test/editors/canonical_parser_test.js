'use strict';

const expect = require('chai').expect,
    fail = expect.fail;

const    fs = require('fs');
const    buildException = require('../../lib/exceptions/exception_factory').buildException;
const    exceptions = require('../../lib/exceptions/exception_factory').exceptions;
const    xml2js = require('xml2js');

function readFileContent(file) {
  try {
    fs.statSync(file).isFile();
  } catch (error) {
    throw new buildException(
        exceptions.WrongFile,
        `The passed file '${file}' must exist and must not be a directory.`);
  }
  return fs.readFileSync(file, 'utf-8');
}

function getRootElement(content) {
  var root;
  var parser = new xml2js.Parser();
  parser.parseString(content, function (err, result) {
    if (result.hasOwnProperty('uml:Model')) {
      root = result['uml:Model'];
    } else if (result.hasOwnProperty('xmi:XMI')) {
      root = result['xmi:XMI']['uml:Model'][0];
    } else {
      throw new buildException(
          exceptions.NoRoot,
          'The passed document has no immediate root element.');
    }
  });
  return root;
}

describe('CanonicalParser', () => {
  describe('when passing a valid diagram', () => {
    describe('taken from the HR example', () => {
      var parser = require('../../lib/editors/canonical_parser.js');

      var parsedData = parser.parse({
        root: getRootElement(readFileContent('/home/eric/Downloads/DDI-xmi-2018-02-01.xml')),
        databaseTypes: {
          contains: function (type) { return true; },
          getName: () => 'general'
        }
      });

      it('parses it', () => {
        expect(parsedData).not.to.be.null;
        // console.log(parsedData.classes);
      });
      xit('correctly parses the JobHistory class', () => {
        var jobHistory = parsedData.classes['_0iCy1rieEeW4ip1mZlCqPg'];
        expect(jobHistory.name).to.eq('JobHistory');
        expect(jobHistory.tableName).to.eq('job_history');
        expect(jobHistory.fields).to.deep.eq([
          '_0iCy27ieEeW4ip1mZlCqPg',
          '_0iCy3LieEeW4ip1mZlCqPg'
        ]);
        expect(jobHistory.comment).to.eq('');
        expect(jobHistory.dto).to.eq('no');
        expect(jobHistory.pagination).to.eq('no');
        expect(jobHistory.service).to.eq('no');
      });
      xit('correctly parses the Job class', () => {
        var job = parsedData.classes['_0iCy47ieEeW4ip1mZlCqPg'];
        expect(job.name).to.eq('Job');
        expect(job.tableName).to.eq('job');
        expect(job.fields).to.deep.eq([
          '_0iCy57ieEeW4ip1mZlCqPg',
          '_0iCy6LieEeW4ip1mZlCqPg',
          '_0iCy6bieEeW4ip1mZlCqPg',
          '_0iCy6rieEeW4ip1mZlCqPg'
        ]);
        expect(job.comment).to.eq('');
        expect(job.dto).to.eq('no');
        expect(job.pagination).to.eq('no');
        expect(job.service).to.eq('no');
      });
      xit('correctly parses the Department class', () => {
        var department = parsedData.classes['_0iCy77ieEeW4ip1mZlCqPg'];
        expect(department.name).to.eq('Department');
        expect(department.tableName).to.eq('department');
        expect(department.fields).to.deep.eq([
          '_0iCy9LieEeW4ip1mZlCqPg',
          '_0iCy9bieEeW4ip1mZlCqPg'
        ]);
        expect(department.comment).to.eq('');
        expect(department.dto).to.eq('no');
        expect(department.pagination).to.eq('no');
        expect(department.service).to.eq('no');
      });
      xit('correctly parses the Employee class', () => {
        var employee = parsedData.classes['_0iCy-7ieEeW4ip1mZlCqPg'];
        expect(employee.name).to.eq('Employee');
        expect(employee.tableName).to.eq('employee');
        expect(employee.fields).to.deep.eq([
          '_0iCzAbieEeW4ip1mZlCqPg',
          '_0iCzArieEeW4ip1mZlCqPg',
          '_0iCzA7ieEeW4ip1mZlCqPg',
          '_0iCzBLieEeW4ip1mZlCqPg',
          '_0iCzBbieEeW4ip1mZlCqPg',
          '_0iCzBrieEeW4ip1mZlCqPg',
          '_0iCzB7ieEeW4ip1mZlCqPg',
          '_0iCzCLieEeW4ip1mZlCqPg'
        ]);
        expect(employee.comment).to.eq('');
        expect(employee.dto).to.eq('no');
        expect(employee.pagination).to.eq('no');
        expect(employee.service).to.eq('no');
      });
      xit('correctly parses the Location class', () => {
        var location = parsedData.classes['_0iCzELieEeW4ip1mZlCqPg'];
        expect(location.name).to.eq('Location');
        expect(location.tableName).to.eq('location');
        expect(location.fields).to.deep.eq([
          '_0iCzErieEeW4ip1mZlCqPg',
          '_0iCzE7ieEeW4ip1mZlCqPg',
          '_0iCzFLieEeW4ip1mZlCqPg',
          '_0iCzFbieEeW4ip1mZlCqPg',
          '_0iCzFrieEeW4ip1mZlCqPg'
        ]);
        expect(location.comment).to.eq('');
        expect(location.dto).to.eq('no');
        expect(location.pagination).to.eq('no');
        expect(location.service).to.eq('no');
      });
      xit('correctly parses the Country class', () => {
        var country = parsedData.classes['_0iCzGbieEeW4ip1mZlCqPg'];
        expect(country.name).to.eq('Country');
        expect(country.tableName).to.eq('country');
        expect(country.fields).to.deep.eq([
          '_0iCzG7ieEeW4ip1mZlCqPg',
          '_0iCzHLieEeW4ip1mZlCqPg'
        ]);
        expect(country.comment).to.eq('');
        expect(country.dto).to.eq('no');
        expect(country.pagination).to.eq('no');
        expect(country.service).to.eq('no');
      });
      xit('correctly parses the Region class', () => {
        var region = parsedData.classes['_0iCzH7ieEeW4ip1mZlCqPg'];
        expect(region.name).to.eq('Region');
        expect(region.tableName).to.eq('region');
        expect(region.fields).to.deep.eq([
          '_0iCzILieEeW4ip1mZlCqPg',
          '_0iCzIbieEeW4ip1mZlCqPg'
        ]);
        expect(region.comment).to.eq('');
        expect(region.dto).to.eq('no');
        expect(region.pagination).to.eq('no');
        expect(region.service).to.eq('no');
      });
      xit('correctly parses the Task class', () => {
        var task = parsedData.classes['_0iCzIrieEeW4ip1mZlCqPg'];
        expect(task.name).to.eq('Task');
        expect(task.tableName).to.eq('task');
        expect(task.fields).to.deep.eq([
          '_0iCzI7ieEeW4ip1mZlCqPg',
          '_0iCzJLieEeW4ip1mZlCqPg',
          '_0iCzJbieEeW4ip1mZlCqPg'
        ]);
        expect(task.comment).to.eq('');
        expect(task.dto).to.eq('no');
        expect(task.pagination).to.eq('no');
        expect(task.service).to.eq('no');
      });
      xit('correctly adds the class names', () => {
        expect(parsedData.classNames).to.deep.eq([
          'JobHistory',
          'Job',
          'Department',
          'Employee',
          'Location',
          'Country',
          'Region',
          'Task'
        ]);
      });
    });
  });
});
