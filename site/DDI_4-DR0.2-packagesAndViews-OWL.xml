    <SubClassOf>
        <Class abbreviatedIRI="ddi:StructuredDataTypes_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Conceptual_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SimpleCodebook_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SimpleMethodologyOverview_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RegularExpressions_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicClassification_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:FormatDescription_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomMetadata_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingMethodology_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudyRelated_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Enumerations_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessWorkflow_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Utility_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Workflows_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Methodologies_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Discovery_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataCapture_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Identification_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalDataDescription_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:XMLSchemaDatatypes_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:XMLSchemaDatatypes_Package</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">This package comprehends XML Schema datatypes which are used in the DDI model.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Agents_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Representations_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DescriptiveCodebookView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
This view is intended to provide a structure for the information needed to understand and make intelligent use of a set of data without other communication from the person or organization producing the data. It can be used to move the data into and among multiple software platforms. This information is useful for discovery of the data.

The view includes basic information about how the data were collected, but does not provide machine actionable details.

The view provides information about:
Variables and the representation of the data for each, 
Basic statistics for individual variables
Universe and population, 
Spatial, temporal, and topical coverage
The study under which the data were created
Overviews of Methodology, Design, and Process
Physical storage


Use Cases:
Basic search to find data (general search, known item search) by users looking to use data. 
--Searches by variable, coverage, creators, time frame, population, methodology and more
Machine actionable ingest to statistical software allowing users to analyze the data
--An open standard for representing the metadata needed to read the data 
Informational content to support intelligent use and understanding of the data
--The essential information for interpreting and using the data (e.g. units of measurement, relevant population)


Target Audiences:
Individual researchers, research groups, National Statistical Organizations focusing on stand-alone codebooks, students, instructors, archives, and libraries. Software tool makers.

Restricted Classes:
DesignOverview references Precondition, Goal, and WorkflowProcess
InstanceVariable references RepresentedVariable, and ConceptualVariable, and the abstract class Act(InstrumentComponent, ComputationAction, StudyControl, and MetadataDrivenAction)
Methodology references Methodology
ProcessOverview references ProcessSequence
RepresentedMeasurement references ExternalAid
RepresentedQuestion references ExternalAid
SamplingProcedure references SamplingDesign, SamplingAlgorithm, and SamplingProcess
SentinelConceptualDomain references ConceptualSystem
SpatialCoverage references GeographicUnitClassification, and GeographicUnitTypeClassification
Study references AuthorizationSource
SubstantativeConceptualDomain references ConceptualSystem</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Access"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Access</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes access to the annotated object. This item includes a confidentiality statement, descriptions of the access permissions required, restrictions to access, citation requirements, depositor requirements, conditions for access, a disclaimer, any time limits for access restrictions, and contact information regarding access.

Examples
==========
A proprietary InstanceQuestion might have specific access restrictions.

DDI 3.2 mapping
=================
a:AccessType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentListing"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentListing</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A listing of Agents of any type. The AgentList may be organized to describe relationships between members using AgentRelationStructure.

Examples
==========
Organizations contributing to a project. Individuals within an agency. All organizations, indivduals, and machines identified within the collections of an archive.

Explanatory notes
===================
Relationships between agents are fluid and reflect effective dates of the relationship. An agent may have multiple relationships which may be sequencial or concurrent. Relationships may or may not be hierarchical in nature. All Agents are serialized individually and brought into relationships as appropriate.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Agents in a collection. Clarifies valid period and the purpose the relationship serve

Examples
==========
An individual employed by an Organization. A unit or project (organization) within another Organization.

Explanatory notes
===================
Describes relations between agents not roles within a project or in relationship to a product. Roles are defined by the parent class and relationship name that uses an Agent as a target.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AlgorithmOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AlgorithmOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, algorithm statement used to describe the overall methodology. 

Explanatory notes
===================
This would most commonly be used in a Codebook along with a MethodologyOverview and a DesignOverview.The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AttributeRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AttributeRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An AttributeRole identifies one or more InstanceVariables as being attributes within a ViewPoint. An AttributeRole is a SimpleCollection of InstanceVariables acting in the AttributeRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no



Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint.
An InstanceVariable with an AttributeRole assigned might contain data about the conditions under which the MeausreRole InstanceVariables were collected or other paradata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AuthorizationSource"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AuthorizationSource</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the authorizing agency and allows for the full text of the authorization (law, regulation, or other form of authorization).

Examples
==========
 May be used to list authorizations from oversight committees and other regulatory agencies.

Explanatory notes
===================
Supports requirements for some statistical offices to identify the agency or law authorizing the collection or management of data or metadata.

Synonyms
==========
Use for the Case Law, Case Law Description, and Case Law Date properties in ClassificationItem

DDI 3.2 mapping
=================
r:AuthorizationSourceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Budget"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Budget</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of the budget for any of the main publication types that can contain a reference to an external budget document.

DDI 3.2 mapping
=================
r:BudgetType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComplianceStatement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComplianceStatement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for a quality statement based on frameworks to be described using itemized properties. A reference to a concept, a coded value, or both can be used to specify the property from the standard framework identified in StandardUsed. Usage can provide further details or a general description of compliance with a standard.

DDI 3.2 mapping
=================
r:ComplianceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Coverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Coverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Coverage information for an annotated object. Includes coverage information for temporal, topical, and spatial coverage. 

Examples
==========
A survey might have ask people about motels they stayed in (topical coverage) in the year 2015 (temporal coverage), while they were travelling in Kansas (spatial coverage). This is different than the temporal, and spatial attributes of the population studied – (international travelers to the US surveyed in 2017).

Explanatory notes
===================
Coverage is a container for the more specific temporal, spatial, and topical coverages to which it refers.

DDI 3.2 mapping
=================
r:CoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPoint"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPoint is a container for a Datum.

Examples
==========
A cell in a spreadsheet table. Note that this could be empty. It exists independently of the value to be stored in it.

Explanatory notes
===================
The DataPoint is structural and distinct from the value (the Datum) that it holds. [GSIM 1.1]

GSIM mapping
==============
Data Point</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPointRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPointRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means for describing the complex relational structure of Data Points in a Logical Record</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Datum"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Datum</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Datum is a designation (a representation of a concept by a sign) with a notion of equality defined. The sign itself is a perceivable object.

Examples
==========
A systolic blood pressure of 122 is measured. The Signifier for that measurement in this paragraph is the character string "122". The Datum in this case is a kind of Designation (Sign), which is the association of the underlying measured concept (a blood pressure at that level) with that Signifier.  The Datum has an association with an InstanceVariable which allows the attachment of a unit of measurement (mm Hg), a datatype, a Population, and the Act which produced the measurement.  These InstanceVariable attributes are critical for interpreting the Signifier.

Explanatory notes
===================
From GSIM 1.1 "A Datum is the actual instance of data that was collected or derived. It is the value which populates one or more Data Points. A Datum is the value found in a cell of a table." (https://statswiki.unece.org/display/GSIMclick/Datum )  A Datum could be copied to one or more datasets.
DDI4 takes a little more formal (semiotic) description of a Datum using the Signification Pattern. See the attached example.


NOTE: This is NOT datum from DDI3.2 (which is quite specific).

GSIM mapping
==============
Datum</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DesignOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DesignOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, design statement The design may be used to specify how a process will be performed in general. This would most commonly be used in a Codebook along with an AlgorithmOverview and a MethodologyOverview. The design informs a specific or implemented process as to its general parameters. Supports specification of any realization of Goal. 


Explanatory notes
===================
Allows for the use of any realized Process. The methodology, design, and algorithm of a specific realized process should be used if available. The use of a generic Process such as a WorkflowProcess containing an Act would be appropriate here. Restriction would be done by inclusion of the appropriate realized process class(es) in a Functional View.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Embargo"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Embargo</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides information about data that are not currently available because of policies established by the principal investigators and/or data producers. Embargo provides a name and label of the embargo, the dates covered by the embargo, the rationale or reason for the embargo, a reference to the agency establishing the embargo, and a reference to the agency enforcing the embargo.

DDI 3.2 mapping
=================
r:EmbargoType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExPostEvaluation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExPostEvaluation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Evaluation for the purpose of reviewing the study, data collection, data processing, or management processes. Results may feed into a revision process for future data collection or management. Identifies the type of evaluation undertaken, who did the evaluation, the evaluation process, outcomes and completion date.

DDI 3.2 mapping
=================
r:ExPostEvaluationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalAid"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalAid</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Any external material used in an instrument that aids or facilitates data capture, or that is presented to a respondent and about which measurements are made. 

Examples
==========
Image, link, external aid, stimulus, physical object.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:FundingInformation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:FundingInformation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides information about the individual, agency and/or grant(s) which funded the described entity. Lists a reference to the agency or individual as described by a DDI Agent, the role of the funder, the grant number(s) and a description of the funding activity.

Examples
==========
A "millionaire grant" (funding description) from John Beresford Tipton, Jr. (individual). Exploration of the effect of sudden wealth and basis for a television episode (funder role).

DDI 3.2 mapping
=================
r:FundingInformationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IdentifierRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IdentifierRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An IdentifierRole identifies one or more InstanceVariables as being identifiers within a ViewPoint. An IdentifierRole is a SimpleCollection of InstanceVariables acting in the IdentifierRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ImplementedInstrument"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ImplementedInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific data capture tool.  ImplementedInstruments are mode and/or unit specific.

Examples
==========
Two versions of a conceptual instrument, computer assisted personal interviewing (CAPI) and mail, would be separate ImplementedInstruments. These might both reference the same ConceptualInstrument. 
A piece of equipment used to measure blood pressure.


Synonyms
==========
aka PhysicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Instruction"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Instruction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the content and description of data capture instructions. Contains the "how to" information for administering an instrument.

Examples
==========
Completion instructions in self-administered mail questionnaire, information for administering a blood pressure measurement, interviewer instructions for a CATI questionnaire, guidance for communicating between an interviewer and a respondent (note MIDUS cognitive assessment example).

DDI 3.2 mapping
=================
d:InstructionType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MeasureRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MeasureRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A MeasureRole identifies one or more InstanceVariables as being measures within a ViewPoint. A MeasureRole is a SimpleCollection of InstanceVariables acting in the MeasureRole.



Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MethodologyOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MethodologyOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative methodology statement used to describe the overall methodology, identify related design, algorithm, and process information. A methodology is normally informed by earlier research and clarifies how earlier research methods were incorporated into the current work. 



Examples
==========
The target of the relationship from Study: "hasMethodology"


Explanatory notes
===================
This would most commonly be used in a Codebook along with an AlgorithmOverview and a DesignOverview. Note that Process may be described in more detail than a high level overview.
Note that the algorithm may be implemented by multiple processes which are not limited to any specific type of Process. This can be constrained by the inclusion of only specific realizations of Process within a Functional View. Note that this MethodologyOverview can be used as a collective description of specific methodologies used by a Study or other broad set of metadata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalDataSet"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalDataSet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The information needed for understanding the physical structure of data coming from a file or other source. A StructureDescription also points to the Data Store it physically represents.

Examples
==========
The PhysicalDataProduct is the entry point for information about a file or other source. It includes information about the name of a file, the structure of segments in a file and the layout of segments.

Explanatory notes
===================
Multiple styles of structural description are supported: including describing files as unit-record (UnitSegmentLayout) files; describing cubes; and describing event-history (spell) data.

DDI 3.2 mapping
=================
p:PhysicalDataProductType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalLayoutRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalLayoutRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the sequence of Value Mappings in a Physical Layout. This can be more complex than a simple sequence. 

Examples
==========
The W3C Tabular Data on the Web specification allows for a list datatype. In the example below there are three top level InstanceVariables
PersonID – the person identifier
AgeYr – age in year
BpSys_Dia – blood pressure (a list containing Systolic and Diastolic values)

There are two variables at a secondary level of the hierarchy
Systolic – the systolic pressure
Diastolic – the diastolic pressure

The delimited file below uses the comma to separate "columns" and forward slash to separate elements of a blood pressure list.

PersonID, AgeYr, BpSys_Dia
1,22,119/67
2,68,122/70

The PhysicalRelationStructure in this case would describe a BpSys_Dia  list variable as containing an ordered sequence of the Systolic and Diastolic InstanceVariables.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalOrderRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalOrderRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
PhysicalStructureOrder orders thePhysicalRecordSegments  which map to a LogicalRecord.

Explanatory notes
===================
The same LogicalRecordLayout may be the sourceMember in several adjacency lists. This can happen when PhysicalRecordSegments are also population specific. In this instance each adjacency list associated with a LogicalRecordLayout is associated with a different population.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalRecordSegment"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalRecordSegment</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of each physical storage segment required to completely cover the logical record. A logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment.

Examples
==========
The file below has four InstanceVariables: PersonId, SegmentId, AgeYr, HeightCm. The data for each person (identified by PersonId) is recorded in two segments (identified by SegmentId), "a" and "b". AgeYr is on physical segment a, and HeightCm is on segment b. These are the same data as described in the UnitSegmentLayout documentation.
1 a  22
1 b 183
2 a 45
2 b 175


DDI 3.2 mapping
=================
p:PhysicalRecordSegmentType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ProcessOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ProcessOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Process is an implementation of an algorithm. It is the series of steps taken as a whole. It is decomposable into ProcessSteps, but this decomposition is not necessary. 

Examples
==========
In descriptive document regarding ingest of a study into a repository: "Validation processes were run comparing all data against the provided documentation to check for out-of-range and invalid content."

Explanatory notes
===================
In a descriptive document, Process Overview provides a means of presenting the reader with a clear view of an overall process without going into the details of the process steps. Process Overview should be used when a description of the process in general is all that is desired.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:QualityStatement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:QualityStatement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A statement of quality which may be related to an external standard or contain a simple overview, rationale, and usage statement. When relating to an external standard information on compliance may be added via the ComplianceStatement referenced by the Standard class.

DDI 3.2 mapping
=================
r:QualityStatementType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RecordRelation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RecordRelation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The RecordRelation object is used to indicate relationships among record types within and between LogicalRecords. For InstanceVariables existing in a LogicalRecord with multiple record layouts, pairs of InstanceVariables may function as paired keys to permit the expression of hierarchical links between records of different types. These links between keys in different record types could also be used to link records in a relational structure.

Examples
==========
One LogicalRecord containing a PersonIdentifier and a PersonName and another LogicalRecord containing a MeasurementID, a PersonID, a SystolicPressure, and a DiastolicPressure could be linked by a RecordRelation. The RecordRelation could employ an InstanceVariableValueMap to describe the linkage between  PersonIdentifier and PersonID.

Explanatory notes
===================
A household-level LogicalRecord might contain an InstanceVariable called HouseholdID and a person-level LogicalRecord might contain an InstanceVariable called HID. Describing a link between HouseholdID and HID would allow the linking of a person-level LogicalRecord to their corresponding household-level LogicalRecord.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedMeasurement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable non-question measurement that can be used as a template that describes the components of a measurement. A type code can be used to describe the type of measure that was used.

Examples
==========
A measure providing a geographic point; A blood pressure protocol; A protocol for measuring an ocean current

Explanatory notes
===================
Non-question measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement allows the reusable format and protocol to be housed in a repository for use by multiple studies or repeated studies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedQuestion"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable question, that can be used as a template that describes the components of a question

Examples
==========
A question in a question bank such as the content and format for a question on Race for all survey/censuses fielded by U.S. agencies as prescribed by the U.S. Office of Management and Budget (OMB)

Explanatory notes
===================
A question that is repeated across waves of a panel study can be reused and also allow reference to a RepresentedVariable. A question that has been tested for consistency of response and is used by multiple studies.

DDI 3.2 mapping
=================
d:QuestionItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcedure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcedure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sampling Procedure describes the population being sampled, the sampling frame and the sampling plan including steps and sub steps by referencing the universe, sample frames and sampling plans described in schemes. Target sample sizes for each stage can be noted as well as the process for determining sample size, the date of the sample and the person or organization responsible for drawing the sample.

Examples
==========
Census of Population and Housing, 1980 Summary Tape File 4, chapter on Technical Information. Overview is the Introduction generally describing the sample; there is a sample design section which provides a more detailed overview of the design. Additional external documentation provides detailed processes for sample adjustments needed for small area estimations, sample frames etc.

Explanatory notes
===================
This is a summary of the methodology of sampling providing both an overview of purpose and use of a particular sampling approach and optionally providing specific details regarding the algorithm, design, and process of selecting a sample.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SegmentByText"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SegmentByText</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the location of a segment of text through character, and optionally line, counts. An adequate description will always include a startCharacterPosition and then may include an endCharacterPosition or a characterLength.
If StartLine is specified, the character counts begin within that line.
An endCharacterPosition of 0 indicates that whole lines are specified


Examples
==========
The segment beginning at line 3, character 4 and ending at line 27 character 13.
Alternatively the segment beginning at character 257 and ending at character 1350 of the whole body of text.
StartLine of 10, endLine of 12, startCharacterPosition of 1, endCharacterPosition of 0 means all of lines 10,11, and 12.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SpatialCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SpatialCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of spatial coverage (geographic coverage) of the annotated object. Spatial coverage is described using a number of objects that support searching by a wide range of systems (geospatial coordinates, geographic classification systems, and general systems using dcterms:spatial).

Examples
==========
A country, a neighborhood, the inside of a polygon on the surface of the earth, along a street, at a particular intersection, or perhaps even in a certain orbit around the planet Mars. For a data set within a study this may be used to define the geographic restriction of the data set within the geographic coverage of the study (eg. The study may cover all of Sweden but the spatial coverage of the data set is Stockholm). 

Explanatory notes
===================
Different systems support different approaches to descriptions of geographic or spatial coverage. Dublin Core has a descriptive text field that is the equivalent of SpatialCoverage/description. Geographers need to understand the spatial objects available (spatialObject, highest and lowest level geography, geographic units and unit types) so they know the building blocks they have to create a map. Spatial search engines do a first pass search by a simple bounding box (the north and south latitudes and east and west longitudes that define the spatial coverage area). Spatial Coverage provides basic support for all of these uses.

Synonyms
==========
r:SpatialCoverage, place</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Standard"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Standard</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the external standard used and describes the level of compliance with the standard in terms specific aspects of the standard's content.

DDI 3.2 mapping
=================
r:StandardType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StandardWeight"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StandardWeight</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an identified value for a standard weight expressed as an xs:float. This object may be referenced by a variable or statistic and used as a weight for analysis.

Examples
==========
A simple sample survey without an individual weight variable will have a StandardWeight to be used on all cases: 1% sample has a sample weight of 100

Explanatory notes
===================
A simple random sample survey without an individual weight variable will have a StandardWeight to be used on all cases. This is common when the sample is a simple random sample of a population with no oversampling to provide larger case counts for small populations.

DDI 3.2 mapping
=================
d:StandardWeightType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Study"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Study</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Study is the conceptual anchor for an individual collection activity resulting in a data set or data file. It can be both a part of a StudySeries as a wave etc. or an unrelated activity like a single survey project.

Examples
==========
ICPSR study 35575 Americans and the Arts [1973 - 1992] (ICPSR 35575). https://www.icpsr.umich.edu/icpsrweb/ICPSR/studies/35575?dataFormat%5B0%5D=SAS&amp;keyword%5B0%5D=public+opinion&amp;geography%5B0%5D=United+States&amp;searchSource=revise  

Explanatory notes
===================
The Study class brings together many properties and relationships describing a set of data – coverage, kind of data, methodology, citation information, access information and more.

DDI 3.2 mapping
=================
s:StudyUnitType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudyRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StudyRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for a complex nested structure for a Study Series</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudySeries"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StudySeries</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection of studies which can be structured as a simple sequence, or with a more complex structure.

Examples
==========
An annual series of surveys.

Explanatory notes
===================
A set of studies may be defined in many ways. A study may be repeated over time. One or more studies may attempt to replicate an earlier study. The StudySeries allows for the description of the relationships among a set of studies.

A simple ordered or unordered sequence of studies can be described via the "contains StudyIndicator" property. More complex relationships among studies may also be described using the optional "isStructuredBy StudyRelationsStructure".</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TemporalCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TemporalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the temporal coverage of the annotated object by specifying dates and optionally associating them with Subject and Keyword. The date itself may be expressed as either and ISO and/or NonISO date. Dates may be catagorized by use of optional typeOfDate using and external controlled vocabulary entry.

Explanatory notes
===================
The association of subjects or keywords with the date periods allows for describing the meaning of the temporal period. A survey, for example might be administered in one time period, but ask questions about the preceding decade. Temporal coverage might then include the data collection coverage as well as the referenced time period.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TopicalCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TopicalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the topical coverage of the module using Subject and Keyword. Subjects are members of structured classification systems such as formal subject headings in libraries. Keywords may be structured (e.g. TheSoz thesauri) or unstructured and reflect the terminology found in the document and other related (broader or similar) terms.

DDI 3.2 mapping
=================
r:TopicalCoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataViewpoint"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataViewpoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The assignment of measure, identifier and attribute roles to InstanceVariables

Each of three roles within a UnitDataViewpoint is a SimpleCollection of instance variables. 

Examples
==========
Assigning 
PatientID the role of identifier
systolic the role of measure
diastolic the role of measure
device the role of attribute
time the role of attribute
position (sitting, standing) the role of attribute

Explanatory notes
===================
Viewpoint is a UnitDataViewpoint to underline that the composition of a UnitDataRecord viewpoint is different from the composition of DataCube viewpoint. The DataCube viewpoint is out of scope currently. 
It is sometimes useful to describe a set of variables and their roles within the set. In the blood pressure example above, values for a set of variables are captured in one setting - the taking of a blood pressure. Some of the variables may be the measures of interest, for example the systolic and diastolic pressure. Other variables may take on the role of identifiers, such as the hospital’s patient ID and a government ID such as the U.S. Social Security Number. A third subgroup of variables may serve as attributes. The age of the patient, whether she is sitting or standing, the time of day. The assignment of these three roles, identifier, measure, and attribute, is the function of the Viewpoint.
Viewpoints are not fixed attributes of variables. This is why there is a separate Viewpoint class which maps to InstanceVariables.   In the example above, the Viewpoint is within the context of the original measurement. In a reanalysis of the data the roles might change. Time of day might be the measure of interest in a study of hospital practices.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitSegmentLayout"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitSegmentLayout</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
UnitSegmentLayout supports the description of unit-record ("wide") data sets, where each row in the data set provides the same group of values for variables all relating to a single unit. Each logical column will contain data relating to the values for a single variable. 

Examples
==========
A simple spreadsheet. Commonly the first row of the table will contain variable names or descriptions.

The following csv file has a rectangular layout and would import into a simple table in a spreadsheet:
PersonId,AgeYr,HeightCm
1,22,183
2,45,175


Explanatory notes
===================
This is the classic rectangular data table used by most statistical packages, with rows/cases/observations and columns/variables/measurements. Each cell (DataPoint) in the table is the intersection of a Unit (row) and an InstanceVariable.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueMapping"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueMapping</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides physical characteristics for an InstanceVariable as part of a PhysicalSegmentLayout

Examples
==========
A variable "age" might be represented in a file as a string with a maximum length of 5 characters and a number pattern of ##0.0

Explanatory notes
===================
An InstanceVariable has details of value domain and datatype, but will not have the final details of how a value is physically represented in a data file. A variable for height, for example, may be represented as a real number, but may be represented as a string in multiple ways. The decimal separator might be, for example a period or a comma. The string representing the value of a payment might be preceded by a currency symbol. The same numeric value might be written as “1,234,567” or “1.234567 E6”. A missing value might be written as “.”, “NA”, “.R” or as “R”. 
The ValueMapping describes how the value of an InstanceVariable is physically expressed. The properties of the ValueMapping as intended to be compatible with the W3C Metadata Vocabulary for Tabular Data (https://www.w3.org/TR/tabular-metadata/ ) as well as common programming languages and statistical packages. The “format” property, for example can draw from an external controlled vocabulary such as the set of formats for Stata, SPSS, or SAS.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableCollection"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableCollection</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection (group) of any type of Variable within the Variable Cascade (Conceptual, Represented, Instance) for purposes of management, conceptualization or anything other than organizing a logical record or physical layout.

Examples
==========
Variables within a specific section of a study, Variables related to a specific subject or keyword. Variables at a specified level of development or review.

Explanatory notes
===================
A simple ordered or unordered list of variables can be described via a set of VariableIndicator parameters. An optional VariableRelationStructure can describe a more complex structure for the collection. We might, for example, use the VariableRelationStructure to group variables by content within a Study or across a StudySeries.

DDI 3.2 mapping
=================
l:VariableGroupType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
RelationStructure for use with any mixture of Variables in the Variable Cascade (Conceptual, Represented, Instance).

Explanatory notes
===================
A VariableCollection can be described as a simple list, or as having a more complex structure. All of the "administrative" variables for a study might be described as just a simple list without a VariableRelationStructure. If, however, the administrative variables needed to be described in subgroups, a VariableRelationStructure could be employed.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableStatistics"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableStatistics</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains summary and category level statistics for the referenced variable.

Examples
==========
A mean of values for a variable "Height". Counts for each level of variable "Gender" (male and female)

Explanatory notes
===================
 Includes information on the total number of responses, the weights in calculating the statistics, variable level summary statistics, and category statistics. The category statistics may be provided as unfiltered values or filtered through a single variable. For example the category statistics for Sex filtered by the variable Country for a multi-national data file. Note that if no weighting factor is identified, all of the statistics provided are unweighted.

DDI 3.2 mapping
=================
pi:VariableStatisticsType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Sampling View covers the methodology and process for drawing a sample from a designated sample frame. It provides the ability to describe sample designs from simple single stage samples to those with multiple stages and ones with more than one frame (necessitating drawing subsets of the sample from each frame). Probability sampling, including model-based, and non-probability sampling can each be described. The descriptive information of the methodologies used, design of the sample, algorithms to support the drawing of the sample, goals, sample frames used, and guidance on the use of the resulting sample (for defining weights, limitations, etc.) are supported. This includes the use of the Workflows which can define the process of creating simple or complex samples on a step-by-step basis. Can be used as metadata to drive sample selection.

Use Cases:
Defining Sample Frames for prospective use
Describing the process of simple or complex sampling procedures to inform the automated creation of a sample from a sample frame
Describe a sample to provide the information necessary to create sampling weights and estimation formulae.
Describe the processing of sampling for the purpose of informing the user of limitations or strengths of a particular sampling procedure and to provide guidance on the use of the procedure or the result of the procedure.

Target Audiences:
Organizations defining sample frames and sampling procedures for execution.
Users requiring information on the sampling process and its limitations.

Restricted Classes:
Parameter: valueRepresentation: ValueDomain: some subtypes not supported: SentinelValueDomain.

Precondition: basedOnPriorResult: Result: some subtypes not supported: SegmentDefintionResult, QualitativeCodingResult.

SamplingDesign: expressesAlgorithm: AlgorithmOverview: some subtypes not supported: SegmentDefinitionAlgorithm, QualitativeCodingAlgorithm, BusinessAlgorithm.

SamplingDesign: implementedBy: WorkflowProcess: all subtypes not supported.

SamplingProcedure: hasDesign: DesignOverview: some subtypes not supported: SegmentDefinitionDesign, QualitativeCodingDesign.

SamplingProcedure: isExpressedBy: AlgorithmOverview: some subtypes not supported: SegmentDefinitionAlgorithm, QualitativeCodingAlgorithm, BusinessAlgorithm.

SamplingProcedure: componentMethodology: MethodologyOverview: some subtypes not supported: SegmentDefinitionMethod, QualitativeCodingMethod.

Split: executeConcurrently: WorkflowStep: some subtypes not supported: Act, ConcurrentControlConstruct, SplitJoin.

SplitJoin: executeConcurrently: WorkflowStep: some subtypes not supported: Act, ConcurrentControlConstruct, Split.

Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
Concept is extended by ConceptualVariable, RepresentedVariable and InstanceVariable.
ExternalMaterial is extended by ExternalAid.
WorkflowStepSequence is extended by StructuredWorkflowSteps.

General documentation:
In socio-economic statistics, samples are used to conduct surveys within time, accuracy, and expense constraints. When it comes time to conduct a survey, the sample is selected from a larger set, called the frame or sampling frame. Frames are an enumeration of the population the survey is designed to estimate, but they don’t contain the variables a survey or experiment might collect. The sample is a subset of the frame, and it is designed (in theory) to be representative of the population as a whole. In practice, for any selected sample, this might not be the case.

Samples can be based on probability or not. For a probability based sample, each element in the frame is assigned a probability it is selected for a sample. Non-probability samples do not have this feature, and the elements are selected in some other manner. The representativeness of a probability based sample is measured as sampling error, a statistical measure. Every probability sample has a sampling error associated with it. It is an indicator of how accurate estimates are to the theoretical population values.

Several methods can be used to select a sample. In the simple case, elements are selected from the frame in one step. In the probability based case, typical techniques are simple random sampling (with or without replacement), systematic random sampling, sampling proportional to size, and simple stratified random sampling. For non-probability samples, techniques include convenience, purposive, quota, self-selected, and snowball sampling.

Sampling in scientific experiments is different than for statistical surveys usually. Non-probability sampling is often used. Self-selected samples (for instance people who volunteer for a drug trial) are often seen. 

To help reduce sampling errors, improve estimates, reduce costs, and reduce the time to complete a survey, sampling is sometimes broken into parts. The first main way this is done is through the use of strata. Strata are subsets of a population with independent estimates. For example, the mean height of women is different than the mean height of men. Sampling based on stratification reduces sampling error.

The other main way samples are partitioned is through clusters. Clusters are subsets based on some convenience criteria. For example, to make sure interviews can be conducted in a short amount of time for a country-wide survey, selected sample units might need to be geographically close, or clustered. This will greatly reduce the time and cost for collecting data, but it has the reverse effect of increasing the sampling error. Representativeness is affected if only some geographical areas are used to select the sample.

Sometimes, so many clusters are identified that they are sampled themselves. Then within those selected, the units for collection are selected. This is a 2-stage sample, and it should not be hard to imagine more than 2 steps to reduce clusters to a manageable size before the ultimate sampling units are selected. Some statistical surveys in the US have 4 stages or more.

It is possible that for some survey, more than one frame is needed. For instance, in random dialing telephone surveys, a bank of valid telephone numbers is the frame, and some are selected for contact. However, the bank of valid telephone numbers might come from the telephone company, and they are all land-lines. To get full coverage of the population, one must also select from a bank of cellphone numbers. Thus, 2 frames are needed, 2 samples are selected for full coverage (representativeness) to be achieved.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Access"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Access</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes access to the annotated object. This item includes a confidentiality statement, descriptions of the access permissions required, restrictions to access, citation requirements, depositor requirements, conditions for access, a disclaimer, any time limits for access restrictions, and contact information regarding access.

Examples
==========
A proprietary InstanceQuestion might have specific access restrictions.

DDI 3.2 mapping
=================
a:AccessType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AppliedUse"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AppliedUse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Links the guidance instructions to specific unit types.

Examples
==========
Links one or more guides for the use of a sample (result) obtained in the first stage of complex sample with the unit type. A sample of Counties from which households will be selected in the next sample stage.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Goal"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Goal</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Goals are the "things" a method aims to achieve. A goal may be a business function (GSIM) corresponding to a function in a catalog of functions such as GSBPM or GLBMN. However, goals may be specified more broadly. For example, conducting a clinical trial might be the goal of a method. Machine learning might be the goal of a method. 



Examples
==========
To further distinguish a "goal" from an "output", consider the construction of a statistic. A goal may be the construction of the statistic. The output is the statistic. The output is data. The statistic by itself -- the output -- is arguably meaningless even if we capture the process of its construction. 

GSIM mapping
==============
Business Function</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Guide"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Guide</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides a guide for the usage of a result within a specified application

Examples
==========
The applied use of a weight determined by a weighting process in analyzing a data set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Precondition"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Precondition</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A precondition is a state. The state includes one or more goals that were previously achieved. This state is the necessary condition before a process can begin.

Examples
==========
Using goals and preconditions processes can be chained to form work flows. Note that these work flows do not include data flows. Instead data flows consisting ouf outputs, inputs and bindings are a separate swim lane. 

Explanatory notes
===================
A precondition related to a design defines the state that must exist in order for a design being applied. For example in applying a Sampling Design there may be a precondition for the existance of a sampling frame meeting certain specifications.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SampleFrame"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SampleFrame</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of information used to identify a sample population within a larger population. The sample frame will contain identifying information for individual units within the frame as well as characteristics which will support analysis and the division of the frame population into sub-groups.

Examples
==========
A listing of all business enterprises by their primary office address with information on their industry classification, work staff size, and production costs. A telephone directory. An address list of housing units.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplePopulationResult"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplePopulationResult</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sample Population is the result of a sampling process. It is the subset of the population selected from the Sample Frame or Frames that will be used as respondents to represent the target population. Sample Populations may occur at a number of stages in the sampling process and serve as input to a subsequent sampling stage. The Sample Population should be validated against the intended sample population as described in the goal of the design and/or process.

Examples
==========
A list of phone numbers representing a random sample from a telephone book. The Counties selected from within a State from which Households will be selected using another sampling method.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingAlgorithm"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingAlgorithm</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Generic description of a sampling algorithm expressed by a Sampling Design and implemented by a Sampling Process. May include common algebraic formula or statistical package instructions (use of specific selection models).

Examples
==========
Random Sample; Stratified Random Sample</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingDesign"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingDesign</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Sampling plan defines the how the sample is to be obtained through the description of methodology or a model based approach, defining the intended target population, stratification or split procedures and recommended sample frames. The content of a sampling plan is intended to be reusable. The application of the sample plan is captured in Sampling Process.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingGoal"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingGoal</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides general description and specific targets for sample sizes including sub-populations.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcedure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcedure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sampling Procedure describes the population being sampled, the sampling frame and the sampling plan including steps and sub steps by referencing the universe, sample frames and sampling plans described in schemes. Target sample sizes for each stage can be noted as well as the process for determining sample size, the date of the sample and the person or organization responsible for drawing the sample.

Examples
==========
Census of Population and Housing, 1980 Summary Tape File 4, chapter on Technical Information. Overview is the Introduction generally describing the sample; there is a sample design section which provides a more detailed overview of the design. Additional external documentation provides detailed processes for sample adjustments needed for small area estimations, sample frames etc.

Explanatory notes
===================
This is a summary of the methodology of sampling providing both an overview of purpose and use of a particular sampling approach and optionally providing specific details regarding the algorithm, design, and process of selecting a sample.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcess"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcess</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the details of the process used to apply the sampling design and obtain the sample. Sampling Process contains a Workflow Step which provides the constituents of a Workflow. It can be a composition (a set of Control Constructs) or atomic (an Act) and may be performed by a service. This allows the use of existing Workflow models to express various sampling process actions. Sampling Frames and Sample Population can be used as designated Inputs or Outputs using Parameters.

Examples
==========
A Split which takes a sampling stage and divides the sample frame into different subsets. A different sampling technique is applied to each subset. Once a split occurs each subset can have stages underneath, and the number of states under each split subset may differ.
A Stage is the application of a single sampling algorithm applied to a sampling frame. For instance, the US Current Population Survey samples geographic areas first before identifying household to contact within each of those areas.
A Stratification of a stage into multiple subsets. Each stratified group will be sampled using the same sampling approach. For example stratifying a state by ZIP Code areas in each of 5 mean income quintiles and then doing a random sample of the households in a set of Zip Codes. Allows for oversampling of identified subpopulations.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Split"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Split</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The components of a Split consists of a number of process steps to be executed concurrently with partial synchronization. Split completes as soon as all of its component process steps have been scheduled for execution.

Explanatory notes
===================
Supports parallel processing that does not require completion to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SplitJoin"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SplitJoin</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
SplitJoin consists of process steps that are executed concurrently (execution with barrier synchronization). That is, SplitJoin completes when all of its components processes have completed. 

Examples
==========
A GANTT chart where a number of processes running parallel to each other are all prerequisites of a subsequent step.

Explanatory notes
===================
Supports parallel processing that requires completion of all included process steps to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowService"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowService</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means of performing a Workflow Step as part of a concrete implementation of a Business Function  (an ability that an organization possesses, typically expressed in general and high level terms and requiring a combination of organization, people, processes and technology to achieve).

Examples
==========
A specification for an air flow monitor used to capture a measure for an ImplementedMeasure (a subtype of Act).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassificationView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Statistical Classification View brings together the structures need to record, organize, manage, and index Statistical Classifications. These classifications are often developed cooperatively and managed over time. They may be organized into series and families of classifications and use specified vocabularies. Mapping may be provided to express relationships between two or more Statistical Classifications in order to clarify change over time or the similarities and differences between Statistical Classifications in the same family (i.e. Industry, Occupation, Education).

Use Cases:
Industry: US-SIC, NAICS, GICS, ISIC; Occupational: ISCO, US-SOC; Geographic: US-FIPS, NUTS

Target Audience:
Organizations maintaining and managing shared Statistical Classifications.

Included Classes: 
AuthorizationSource, Category, ClassificationFamily, ClassificationIndex, ClassificationIndexEntry, ClassificationItem, ClassificationSeries, Code, Concept, ConceptParentChild, ConceptParentChildPair, ConceptPartWhole, ConceptPartWholePair, ConceptSystem, CorrespondenceTable, ExternalMaterial, Individual, Level, Map, Organization, StatisticalClassification, Vocabulary.

General Documentation:
The abstract class Designation serves as a relationship target for the following classes: ClassificationItem and Vocabulary. The only included class belonging to this abstract group is Code.
The abstract class Node serves as a relationship target for the following classes: Map and Level. The only included class belonging to this abstract group is ClassificationItem.
The abstract class NodeSet serves as a relationship target for the following class: CorrespondenceTable. The only included class belonging to this abstract group is StatisticalClassification.
The abstract class Agent serves as a relationship target for the following classes: CorrespondenceTable and AuthorizationSource. The only included classes belonging to this abstract group are Organization and Individual.
The abstract pattern class OrderedPair serves as a relationship target for the following class: Map. The only included class realizing this pattern is ConceptParentChildPair</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AuthorizationSource"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AuthorizationSource</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the authorizing agency and allows for the full text of the authorization (law, regulation, or other form of authorization).

Examples
==========
 May be used to list authorizations from oversight committees and other regulatory agencies.

Explanatory notes
===================
Supports requirements for some statistical offices to identify the agency or law authorizing the collection or management of data or metadata.

Synonyms
==========
Use for the Case Law, Case Law Description, and Case Law Date properties in ClassificationItem

DDI 3.2 mapping
=================
r:AuthorizationSourceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationFamily"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationFamily</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Family is a collection of Classification Series related from a particular point of view. The Classification Family is related by being based on a common Concept, as documented by the definingConcept relationship   (e.g. economic activity).[GSIM1.1]

Examples
==========
A family of industrial classifications each a separate series (i.e. U.S. Standard Industrial Classification (SIC) and North American Industrial Classification System (NAICS)

Explanatory notes
===================
Different classification databases may use different types of Classification Families and have different names for the families, as no standard has been agreed upon. [GSIM1.1]

GSIM mapping
==============
Classification Family</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationIndex"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationIndex</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Index is an ordered list (alphabetical, in code order etc) of Classification Index Entries. A Classification Index can relate to one particular or to several Statistical Classifications. [GSIM Statistical Classification Model]

Examples
==========
An alphabetical index of a topically ordered Statistical Classification

Explanatory notes
===================
A Classification Index shows the relationship between text found in statistical data sources (responses to survey questionnaires, administrative records) and one or more Statistical Classifications.  A Classification Index may be used to assign the codes for Classification Items to observations in statistical collections. 
A Statistical Classification is a subtype of a Structured Collection.  [GSIM Statistical Classification Model]  Note that a GSIM Node is the equivalent of a DDI Member and a GSIM Node Set is a DDI Collection.

GSIM mapping
==============
Classification Index</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationIndexEntry"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationIndexEntry</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Index Entry is a word or a short text (e.g. the name of a locality, an economic activity or an occupational title) describing a type of object/unit or object property to which a Classification Item applies, together with the code of the corresponding Classification Item. Each Classification Index Entry typically refers to one item of the Statistical Classification. Although a Classification Index Entry may be associated with a Classification Item at any Level of a Statistical Classification, Classification Index Entries are normally associated with items at the lowest Level.

GSIM mapping
==============
Classification Index Entry</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationItem"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationItem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Item represents a Category at a certain Level within a Statistical Classification.


Examples
==========
In the  2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

Explanatory notes
===================
A Classification Item defines the content and the borders of the Category. A Unit can be classified to one and only one item at each Level of a Statistical Classification. As such a Classification Item is a placeholder for a position in a StatisitcalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. 

This differentiates it from Code which is a kind of Designation, in particular it is an alphanumeric string assigned to stand in place of a category. For example, the letter M might stand for the category Male in the CodeList called Gender.

GSIM mapping
==============
Classification Item</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationItemRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationItemRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A complex RelationStructure for use with statistical classification

Examples
==========
A ClassificationRelationStructure for ISCO-08 would describe each of the major classifications as a parent of its sub-classifications.   1 Managers, for example would be listed as a parent of four sub groups: 11 Chief Executives, Senior Officials and Legislators;  12 Chief Executives, Senior Officials and Legislators;  13 Production and Specialized Services Managers; and  14 Hospitality, Retail and Other Services Managers. 

Explanatory notes
===================
The ClassificationItemRelationStructure has a set of ClassificationItemRelations which are basically adjacency lists. A source ClassificationItem has a described relationship to a target list of ClassificationItem. The semantic might be, for example, "parentOf", or "contains", etc..</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationSeries"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationSeries</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Series is an ensemble of one or more Statistical Classifications, based on the same concept, as documented by the definingConcept relationship, and related to each other as versions or updates. Typically, these Statistical Classifications have the same name.

Examples
==========
ISIC or ISCO
SIC (with different published versions related to the publication year)

GSIM mapping
==============
Classification Series</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationSeriesRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationSeriesRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the complex relation structure of a classification family.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CorrespondenceTable"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CorrespondenceTable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Correspondence Table expresses relationships between the members within or between StatisticalClassifications.

Examples
==========
Correspondence between the U.S. Standard Industrial Classification (SIC) and North American Industrial Classification System (NAICS)

Explanatory notes
===================
CorrespondenceTables are used with Statistical Classifications. For instance, it can relate two versions from the same Classification Series; Statistical Classifications from different Classification Series; a variant and the version on which it is based; or, different versions of a variant. In the first and last examples, the Correspondence Table facilitates comparability over time.

GSIM mapping
==============
Correspondence Table</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IndexEntryRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IndexEntryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Structures relationship of Classification Index Entries in a Classification Index.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassification"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Statistical Classification is a set of Categories represented by Classification Items which may be assigned to one or more variables registered in statistical surveys or administrative files, and used in the production and dissemination of statistics. The Categories at each Level of the classification structure must be mutually exclusive and jointly exhaustive of all objects/units in the population of interest. (Source: GSIM StatisticalClassification)

Explanatory notes
===================
A Classification Item represents a Category at a certain Level within a Statistical Classification. The Categories are defined with reference to one or more characteristics of a particular universe of units of observation. A Statistical Classification may have a flat, linear structure or may be hierarchically structured, such that all Categories at lower Levels are sub-Categories of Categories at the next Level up. (Source: GSIM StatisticalClassification) 

GSIM mapping
==============
Statistical Classification</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassificationRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassificationRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structure for describing the complex relationship between statistical classifications in a classification series

Examples
==========
A classification series that branches into separately versioned classifications

Explanatory notes
===================
Can use relation specification information to more fully describe the relationship between members such as parent/child, whole/part, general/specific, equivalence, etc.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StructuredGeographyView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The purpose of Geographic Classification in DDI is to express relationships over time and space that are currently only available in geographic shape files or by exploring the data file itself. A great deal of legacy data does not have related geographic files. A large group of areas covered by DDI do not have clearly defined geography in terms of spatial extent, but have considerable relational information. Many geographic structures define geographic unit types with descriptive sub-sets (e.g. “Places of over 10,000 population” where the user must know whether a specific location meets that definition prior to determining if it is included in the data set).

Use Cases:
Describing geographic structures and their hierarchies
Describing geographic units and their corresponding locations (polygons, bounding boxes, points etc.)
Documenting changes to geographic units over time

Target Audiences:
Digital archivists
Search engines intent on exposing data by their geographical coverage
Researchers who need to describe complex geographical structures
Researchers who need to describe geographical structures and locations with changes over time

Restricted Classes:
ConceptSystem is extended by CategorySet
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population and Universe.
ExternalMaterial is extended by ExternalAid.

General Documentation:
Geographic classification uses unit, unit type, and collections to provide the basis for describing the geographic structure (unit types) and their individual locations (units) in a manner that supports complex layered hierarchies, changes in name, role, and geographic extent over time, and coding for direct use in value domains and responses. It supports the content of DDI Lifecycle Geographic Structure and Geographic Location.
The revision of the DDI 3.2 structure into the DDI4 structure addresses the following constraints in DDI 3.2:
·        Codes and names can be used directly wherever a code list can be used (both Geographic Unit Type Classification and Geographic Unit Classification are sub-types of Code List
·        A Geographic Unit (location) can belong to multiple Geographic Unit Type (geographic levels) with replicating its content
·        A Geographic Unit can version and/or define new units whenever there is a change in name or spatial extent as determined by the user. For example a Metropolitan Area may change only its spatial extent over time and be managed as versions of the same conceptual location; a city may annex additional land, or be renamed. Normally a new version of a Geographic Unit should have some common spatial extent with the old version. This can be described in the Geographic Unit precedes or supersedes using the Spatial Relationship using Spatial Relation Specification (Equals  Disjoint  Intersects  Contains  Touches).
·        Geographic Units can be used to describe points, lines, and/or polygons as well as include centroid information.


Equivalent Content between DDI 3.2 and DDI 4
DDI 3.2 - DDI 4 - Comment

Geographic Structure - Geographic Unit Type Classification - no comment

Geographic Level - Unit Type - Because no specialized information was being gathered a generic Unit Type is used. This allows users to declare any Unit Type as part of geography without requiring that it be of a specific type.

Parent Structure / Geographic Layer Base - Geographic Unit Type Relation Structure - Described as separate hierarchies; can have levels; Spatial relationships can be described

Geographic Level Code - Geographic Unit Type Instance - Codes are assigned when the Unit Type is used by a Geographic Unit Type Classification (see information on contains in Geographic Location)
Primary Component - Geographic Unit Type Relation Structure - Spatial relationships can be described

Geographic Location - Geographic Unit Classification - Inclusion of a Geographic Unit using “contains” allows for the assignment of a code in the same manner as in a code list. Different code sets should be expressed as different geographic unit classifications. Inclusion is by reference so that the described Geographic Unit can be assigned multiple codes without altering the Geographic Unit description

Location Value - Geographic Unit - Rather than grouping with other units of the same unit type, each unit can relate itself to one or more unit types. This allows for a location like Washington, D.C. to act as a State equivalent, County equivalent, and Place in the United States. Provides supersedes and precedes.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitClassification"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the classification of specific geographic units into a classification system. As a subtype of Code List it can be used directly for the description of a value domain.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Geographic Unit Types in a collection.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitTypeClassification"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitTypeClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structured collection of Unit Types defining a geographic structure. As a subtype of CodeList it may be used directly to describe a value domain.

Examples
==========
Country--State--County</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitTypeRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitTypeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Geographic Unit Types in a collection.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataManagementView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
DDI4 data management description aims to account for the ingestion and production of new data types (registry data, health data, big data, spell data, event data, etc.) and both legacy and new data management services that give shape to these data types in the course of the data lifecycle.  The Data Management View describes the prospective and retrospective use of multiple data management platforms and architectures including (1) ESB (Enterprise Service Bus) and SOA (Service Oriented Architecture); (2) the use of PROCs/Commands in statistical packages like SAS, Stata and R; and now (3) the use of iPaaS (integration Platform as a Service) in public clouds, private clouds and apparatuses as practiced by various ETL (Extract, Transform and Load) platforms.

Use Cases:
Create repeatable processes across a data network. More specifically, document and share the specifications for a demographic and epidemiological surveillance DataPipeline across surveillance sites
Produce a Data Management Plan (DMP) in the form of a DataPipeline so other researchers are able to replicate a study’s results
Document the actual data management in a study as a DataPipeline. This could underpin workflow tools for researchers
Use a DataPipeline description as the input to tools that trace the lineage of data during the data lifecycle of a Study 
Use a DataPipeline description and the GraphML it spawns to create workflow diagrams
Specialize the GLBPM to support the production of a dataset of geotagged tweets from the US where a wave corresponds to a day. Create a DataPipeline that describes in detail how this dataset is produced.
Programmatically create a Data Management View for an Extract, Transform and Load (ETL) platform using the ETL’s authoring environment and the instructions that authors create as input

Target Audiences:
Researchers who are preparing a Data Management Plan (DMP)
Data networks migrating from an Enterprise Service Bus (ESB) / Service Oriented Architecture (SOA) platform to a virtual (cloud-based) or actual integrated Platform as a Service (iPaaS) appliance (e.g. ETLs)
Industry-specific or generic standard groups who wish to integrate fully developed information models with domain-specific business process models
Search engines intent on exposing data lineage within a study

General Documentation:
At one level the Data Management View consists of a data pipeline that traverses a series of business activities from business process models like the GSBPM (Generic Statistical Business Process Model) for the production of statistics and the GLBPM (Generic Longitudinal Business Process Model) for the description of longitudinal studies. At another level the Data Management View decomposes these business processes into a series of workflow steps. At both levels components exchange data.

DataPipeline-
With the Data Management View, the user is able to construct a DataPipeline of BusinessProcesses where each BusinessProcess contains either a simple collection or a structured collection of WorkflowSteps. 
The DataPipeline itself is a simple collection of BusinessProcesses with the next one beginning after the preceding one ends.  
Use the Data Management View and its DataPipeline to traverse a business process model once to describe the data lifecycle of a Study and many times to describe the data lifecycle of a StudySeries.

BusinessProcess-
A BusinessProcess has an AlgorithmOverview, zero or more Preconditions, zero or more Postconditions and one or more StandardModelUsed. 
Note that Preconditions and Postconditions are LogicalRecords. One BusinessProcess creates/updates LogicalRecords as Postconditions. These Postconditions may become the Preconditions of the next BusinessProcess.

Figure 1: The DataPipeline

Note that support for business process models here is not limited to either the GSBPM or the GLBPM that the GSBPM has spawned.

The Generic Statistical Business Process Model (GSBPM) circumscribes a set of business processes that together describe a data lifecycle for building a single wave of national statistics. The Generic Longitudinal Business Process Model (GLBPM) specializes the GSBPM for longitudinal studies. Here each traversal of the GLBPM corresponds to the data lifecycle of a Study in a StudySeries.
Other business process models are more or less based on the GLBPM and the GSBPM. For example, a widely used demographic and epidemiological surveillance business process model specializes the GLBPM data lifecycle to create events, event histories and spells.

Figure 2: Support for Specialization of the GSBPM/GLBPM in DDI4 BusinessProcesses

WorkflowSteps-
The BusinessProcess decomposes into a WorkflowStepSequence.  Alternatively, the BusinessProcess AlgorithmOverview can be used to outline a WorkflowStepSequence. This would be appropriate in situations where only a higher-level description was needed.

Figure 3: Example AlgorithmOverview

The WorkflowStepSequence may be either a Simple Collection or a Structured Collection of WorkflowSteps. In a simple collection of WorkflowSteps, successive pairs in the sequence participate in a before/after relationship. In a structured collection, however, relationships among the WorkflowSteps can be complicated: a sequence may have multiple starting points and multiple end points. Here before and after relationships can be indeterminate, depending on a platform and its technology stack.
The structured collection of WorkflowSteps is called a WorkflowStepRelationStructure. Like other structured collections in DDI4, a WorkflowStepRelationStructure is specified in a graph form as an unordered list of adjacency lists where for each vertex we specify an array of adjacent vertices:

Figure 4: The DDI4 RelationStructure

Here each vertex and the array of its adjacencies are WorkflowSteps.

Figure 5: An Example WorkflowRelationStructure (fragment)

The Structured Collection in DDI4 is the successor to GSIM’s Node Set. Using graph representation, DDI4 RelationStructures, like the WorkflowStepRelationStructure, are easy to visualize and annotate using open source tools:

Figure 6: Graph Rendering of Example DDI4 WorkflowRelationStructure</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AlgorithmOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AlgorithmOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, algorithm statement used to describe the overall methodology. 

Explanatory notes
===================
This would most commonly be used in a Codebook along with a MethodologyOverview and a DesignOverview.The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessAlgorithm"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BusinessAlgorithm</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Business Algorithm is used to express the generalized function of the Business Process.
The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.

Examples
==========
There are several well-established algorithms for performing data anonymization including "local suppression", "global attribute generalization" and "k-Anonymization with suppression" which is a specific combination of the two. An anonymizing business process might implement one of these algorithms.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessProcess"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BusinessProcess</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
BusinessProcesses could be Generic Longitudinal Business Process Model (GLBPM) and/or Generic Statistical Business Process Model (GSBPM) steps and/or sub-steps. BusinessProcesses participate in a DataPipeline by virtue of their preconditions and postconditions. 

A BusinessProcess differs from a WorkflowStep by virtue of its granularity. Higher level operations are the subject of BusinessProcesses. A BusinessProcess has a WorkflowStepSequence through which these higher levels operations may optionally be decomposed into WorkflowSteps.

BusinessProcess preconditions and postconditions differ from input and output parameters because they don't take variables and values. Instead the subject of preconditions and postconditions are typically whole datasets.

Given this level of granularity it is possible to view a BusinessProcess through the Open Archival Information System (OAIS) Reference Model. So a BusinessProcess may optionally be described as a component of a Submission Information Package (SIP), an Archival Information Package (AIP) or a Dissemination Information Package (DIP).

Examples
==========
In a single BusinessProcess we might receive data from a data source or merge data from different data sources or create new variables and recodes or format data for data dissemination

Explanatory notes
===================
One or more PairedExternalControlledVocabularyEntry objects may be used to identify and characterize controlled vocabularies like the GLBPM, GSBPM and OAIS. The PairedExternalControlledVocabularyEntry both identifies both the model (term) and the step/sub-step of the model (extent). If a BusinessProcess combines two steps from the same model (GLBPM, GSBPM, OAIS, etc.) or from different models, multiple PairedExternalControlledVocabularyEntry objects can be specified.

Synonyms
==========
Task</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Coverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Coverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Coverage information for an annotated object. Includes coverage information for temporal, topical, and spatial coverage. 

Examples
==========
A survey might have ask people about motels they stayed in (topical coverage) in the year 2015 (temporal coverage), while they were travelling in Kansas (spatial coverage). This is different than the temporal, and spatial attributes of the population studied – (international travelers to the US surveyed in 2017).

Explanatory notes
===================
Coverage is a container for the more specific temporal, spatial, and topical coverages to which it refers.

DDI 3.2 mapping
=================
r:CoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPipeline"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPipeline</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPipeline is a single traversal of the Generic Longitudinal Business Model (GLBPM) and/or the Generic Statistical Business process Model (GSBPM) in the course of a study where a study is either one off or a wave in a StudySeries.

Examples
==========
In a study where the study is a wave in a StudySeries, we do a single traversal of the Generic Longitudinal Business Process Model. From one wave to the next the traversal may be different. Each traversal is described in a DataPipeline.

Extract Transform and Load (ETL) platforms support data pipelines to move data between systems. Using an ETL platform, data engineers create data pipelines to orchestrate the movement, transformation, validation, and loading of data, from source to final destination. The DataPipeline describes this "orchestration".

A prospective DataPipeline gives guidance to data engineers. It is a design pattern. A retrospective DataPipeline documents an ETL data pipeline after the fact.


Synonyms
==========
Traversal, Data Lifecycle</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DesignOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DesignOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, design statement The design may be used to specify how a process will be performed in general. This would most commonly be used in a Codebook along with an AlgorithmOverview and a MethodologyOverview. The design informs a specific or implemented process as to its general parameters. Supports specification of any realization of Goal. 


Explanatory notes
===================
Allows for the use of any realized Process. The methodology, design, and algorithm of a specific realized process should be used if available. The use of a generic Process such as a WorkflowProcess containing an Act would be appropriate here. Restriction would be done by inclusion of the appropriate realized process class(es) in a Functional View.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MetadataDrivenAction"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MetadataDrivenAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
MetadataDrivenActions are Acts in which their logic is defined by validation and transformation rules expressed in some standard rule language.

Examples
==========
Some data management systems present users with a menu of actions they can use in a sequence to perform a specific task. The system engages the user in a dialog driven by an action template. The dialog completes the template which the system then uses to perform the action. The user doesn't write any code.

Explanatory notes
===================
Whereas ComputationActions are used in statistical packages like SPSS, Stata, SAS and R to perform data management and data transformations, MetadataDrivenActions are used by data pipelines, e.g. ETL (Extract Transform Load) platforms, along with ComputationActions.

In a data pipeline the user is presented with a menu of MetadataDrivenActions that are captured here in an external controlled vocabulary. Users enter into a dialog with the platform through which they customize the MetadataDrivenAction. The user writes no code. The dialog is saved.

In the course of this dialog the user might specify a data source, specify which variables to keep or drop, rename variables, specify join specifics, create a value map between two variables and so forth.

MetadataDrivenActions represent this dialog in some standard rule language, e.g. Structured Data Transformation Language (SDTL) , Validation and Transformation Language (VTL), etc.. In fact,  MetaDataDrivenAction can use VTL with certain "extensions". Together they form quasi-VTL. quasi-VTL in turn conforms to a known schema. Using this schema users can render the quasi-VTL as XHTML and record it in the MetadataDrivenAction quasiVTL property. quasiVTL supports structured text.

Note that we would like NOT to create specific subtypes of MetadataDrivenAction -- one for each transformation. In fact there are a dozen or more such actions that will be captured in the MetadataDrivenAction types external controlled vocabulary. As an alternative, users can optionally write structured text based on a known schema. In this approach we are able to "evolve" SDTL as needed without changing our model. Instead, as our language "evolves", we one have to update its schema.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MethodologyOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MethodologyOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative methodology statement used to describe the overall methodology, identify related design, algorithm, and process information. A methodology is normally informed by earlier research and clarifies how earlier research methods were incorporated into the current work. 



Examples
==========
The target of the relationship from Study: "hasMethodology"


Explanatory notes
===================
This would most commonly be used in a Codebook along with an AlgorithmOverview and a DesignOverview. Note that Process may be described in more detail than a high level overview.
Note that the algorithm may be implemented by multiple processes which are not limited to any specific type of Process. This can be constrained by the inclusion of only specific realizations of Process within a Functional View. Note that this MethodologyOverview can be used as a collective description of specific methodologies used by a Study or other broad set of metadata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SpatialCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SpatialCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of spatial coverage (geographic coverage) of the annotated object. Spatial coverage is described using a number of objects that support searching by a wide range of systems (geospatial coordinates, geographic classification systems, and general systems using dcterms:spatial).

Examples
==========
A country, a neighborhood, the inside of a polygon on the surface of the earth, along a street, at a particular intersection, or perhaps even in a certain orbit around the planet Mars. For a data set within a study this may be used to define the geographic restriction of the data set within the geographic coverage of the study (eg. The study may cover all of Sweden but the spatial coverage of the data set is Stockholm). 

Explanatory notes
===================
Different systems support different approaches to descriptions of geographic or spatial coverage. Dublin Core has a descriptive text field that is the equivalent of SpatialCoverage/description. Geographers need to understand the spatial objects available (spatialObject, highest and lowest level geography, geographic units and unit types) so they know the building blocks they have to create a map. Spatial search engines do a first pass search by a simple bounding box (the north and south latitudes and east and west longitudes that define the spatial coverage area). Spatial Coverage provides basic support for all of these uses.

Synonyms
==========
r:SpatialCoverage, place</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Split"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Split</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The components of a Split consists of a number of process steps to be executed concurrently with partial synchronization. Split completes as soon as all of its component process steps have been scheduled for execution.

Explanatory notes
===================
Supports parallel processing that does not require completion to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SplitJoin"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SplitJoin</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
SplitJoin consists of process steps that are executed concurrently (execution with barrier synchronization). That is, SplitJoin completes when all of its components processes have completed. 

Examples
==========
A GANTT chart where a number of processes running parallel to each other are all prerequisites of a subsequent step.

Explanatory notes
===================
Supports parallel processing that requires completion of all included process steps to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Study"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Study</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Study is the conceptual anchor for an individual collection activity resulting in a data set or data file. It can be both a part of a StudySeries as a wave etc. or an unrelated activity like a single survey project.

Examples
==========
ICPSR study 35575 Americans and the Arts [1973 - 1992] (ICPSR 35575). https://www.icpsr.umich.edu/icpsrweb/ICPSR/studies/35575?dataFormat%5B0%5D=SAS&amp;keyword%5B0%5D=public+opinion&amp;geography%5B0%5D=United+States&amp;searchSource=revise  

Explanatory notes
===================
The Study class brings together many properties and relationships describing a set of data – coverage, kind of data, methodology, citation information, access information and more.

DDI 3.2 mapping
=================
s:StudyUnitType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TemporalCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TemporalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the temporal coverage of the annotated object by specifying dates and optionally associating them with Subject and Keyword. The date itself may be expressed as either and ISO and/or NonISO date. Dates may be catagorized by use of optional typeOfDate using and external controlled vocabulary entry.

Explanatory notes
===================
The association of subjects or keywords with the date periods allows for describing the meaning of the temporal period. A survey, for example might be administered in one time period, but ask questions about the preceding decade. Temporal coverage might then include the data collection coverage as well as the referenced time period.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TopicalCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TopicalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the topical coverage of the module using Subject and Keyword. Subjects are members of structured classification systems such as formal subject headings in libraries. Keywords may be structured (e.g. TheSoz thesauri) or unstructured and reflect the terminology found in the document and other related (broader or similar) terms.

DDI 3.2 mapping
=================
r:TopicalCoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataDescriptionView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose
Use the DataDescriptionView to describe a collection of LogicalRecords by themselves or along with their PhysicalRecordSegments in a Study and/or a StudySeries.

Recall that a LogicalRecord is a record definition and a PhysicalRecordSegment describes the physical storage arrangement of a LogicalRecord.

Think of the collection of LogicalRecords and their PhysicalRecordSegment counterparts in a Study as a succession of states that are the products of one or more data transforming processes. In the DataDescriptionView we just describe products in this succession, not the processes through which these products are created.

In this succession operational data may be transformed into analysis-ready data and then analytical data in a series of steps. The DataDescriptionView captures the products from one, some or all of these interim steps. 

Products can include “skinny” and “fat” data structures; relational datastores; star schemas (data warehouses); structured collections of instance variables that take the form of objects, not tables; data cubes (not supported in the prototype) and so forth.

Instead of using the DataDescriptionView, use the DataManagementView for creating data descriptions that are both process-centered and product-centered. 


Use Cases
Construct a catalog of data records produced across the life of a study. Order the records by category: initial or submission records, interim or archival records, analysis or dissemination records
Expose variables in LogicalRecords and their PhysicalRecordSegments so they are searchable by: 
study, 
structural role(s) (identifier, measure and attribute) in one or more viewpoints and 
their functional role(s) as specified in one or more external controlled vocabularies
Specify the information needed for a Submission Information Package (SIP), an Archival Information Package (AIP) or a Dissemination Information Package (DIP) when the data is a CSV file
Support the description of a CSV file that uses a list datatype to, for example, report health measures that consist of compound elements like blood pressure
Support the description of medical information as specified both by Fast Healthcare Interoperability Resources (FHIR) and the Clinical Information Modeling openEHR Initiative (CIMI). With respect to FHIR, support, for example, the Observation and DiagnosticReport resources. With respect to CIMI, support, for example, the various observation archetypes including the newborn Apgar score, blood pressure, body mass index, physical examination findings, etc.
Support the description of a NoSQL key/value store where the key is either a simple collection of one or more identifiers or a structured (hierarchical) collection and the value can be text, video, sound or a JSON document

Target Audiences
Digital archivists
Search engines intent on exposing data lineage within a study
Researchers who are preparing a Data Management Plan (DMP)
Governments intent on exposing in a single datastore registries that include demographic data and health information in order to promote various types of research

Restricted Classes
Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
Concept is extended by ConceptualVariable, RepresentedVariable, UnitType and Universe.
ExternalMaterial is extended by ExternalAid.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AttributeRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AttributeRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An AttributeRole identifies one or more InstanceVariables as being attributes within a ViewPoint. An AttributeRole is a SimpleCollection of InstanceVariables acting in the AttributeRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no



Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint.
An InstanceVariable with an AttributeRole assigned might contain data about the conditions under which the MeausreRole InstanceVariables were collected or other paradata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPoint"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPoint is a container for a Datum.

Examples
==========
A cell in a spreadsheet table. Note that this could be empty. It exists independently of the value to be stored in it.

Explanatory notes
===================
The DataPoint is structural and distinct from the value (the Datum) that it holds. [GSIM 1.1]

GSIM mapping
==============
Data Point</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPointRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPointRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means for describing the complex relational structure of Data Points in a Logical Record</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStoreLibrary"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStoreLibrary</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStoreLibrary is a collection or, again, a "library" of DataStores.

An individual DataStore is associated with a Study. A collection of DataStores is associated with a StudySeries.

The relationships among the DataStores in the DataStoreLibrary is described by the DataStoreRelationStructure. Relations may be more or less complicated depending on the StudySeries type. A StudySeries may be ad hoc. A StudySeries may form a time series. The variety of these collections has been described using the &lt;a href=https://www.ddialliance.org/Specification/DDI-Lifecycle/3.1/XMLSchema/FieldLevelDocumentation/"&gt;"Group"&lt;/a&gt; in DDI 3.1.

Like any RelationStructure, the DataStoreRelationStructure is able to describe both part/whole relations and generalization/specialization relations. See the controlled vocabulary at &lt;a href="http://lion.ddialliance.org/datatypes/relationspecification"&gt;RelationSpecification&lt;/a&gt; to review all the types of relations a RelationStructure is able to describe. 

Examples
==========
A StudySeries is a time series and a DataStoreRelationStructure is dedicated to tracking "supplements".

There is a study at T0. Perhaps it is never executed. It is the "core" study. At T1 there is a study that includes the core and Supplement A. At T2 there is a study that includes the core, Supplement A and Supplement B. At T3 there is a study that includes the core and a one off supplement that is never asked again. T4 though T6 repeats T1 through T3.



Explanatory notes
===================
If we broke a study down into sub-studies where the core is a sub-study and each supplement is a sub-study, we could also use the DataStoreRelationStructure to track the generalization/specialization relationship or, again, "going deep" over time.

Sometimes across a StudySeries we add panels. If panels were also sub-studies, we could use the DataStoreRelationStructure to track both the core and supplements by panel over time.

Synonyms
==========
Structured metadata archive</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStoreRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStoreRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structure for describing a complex relation of DataStores within a DataStoreLibrary

Examples
==========
If the succession of DataStores are created by a StudySeries that is a time series, from one DataStore to the next part/whole relations can obtain as supplements are added and subtracted.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Datum"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Datum</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Datum is a designation (a representation of a concept by a sign) with a notion of equality defined. The sign itself is a perceivable object.

Examples
==========
A systolic blood pressure of 122 is measured. The Signifier for that measurement in this paragraph is the character string "122". The Datum in this case is a kind of Designation (Sign), which is the association of the underlying measured concept (a blood pressure at that level) with that Signifier.  The Datum has an association with an InstanceVariable which allows the attachment of a unit of measurement (mm Hg), a datatype, a Population, and the Act which produced the measurement.  These InstanceVariable attributes are critical for interpreting the Signifier.

Explanatory notes
===================
From GSIM 1.1 "A Datum is the actual instance of data that was collected or derived. It is the value which populates one or more Data Points. A Datum is the value found in a cell of a table." (https://statswiki.unece.org/display/GSIMclick/Datum )  A Datum could be copied to one or more datasets.
DDI4 takes a little more formal (semiotic) description of a Datum using the Signification Pattern. See the attached example.


NOTE: This is NOT datum from DDI3.2 (which is quite specific).

GSIM mapping
==============
Datum</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IdentifierRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IdentifierRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An IdentifierRole identifies one or more InstanceVariables as being identifiers within a ViewPoint. An IdentifierRole is a SimpleCollection of InstanceVariables acting in the IdentifierRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MeasureRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MeasureRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A MeasureRole identifies one or more InstanceVariables as being measures within a ViewPoint. A MeasureRole is a SimpleCollection of InstanceVariables acting in the MeasureRole.



Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalDataSet"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalDataSet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The information needed for understanding the physical structure of data coming from a file or other source. A StructureDescription also points to the Data Store it physically represents.

Examples
==========
The PhysicalDataProduct is the entry point for information about a file or other source. It includes information about the name of a file, the structure of segments in a file and the layout of segments.

Explanatory notes
===================
Multiple styles of structural description are supported: including describing files as unit-record (UnitSegmentLayout) files; describing cubes; and describing event-history (spell) data.

DDI 3.2 mapping
=================
p:PhysicalDataProductType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalLayoutRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalLayoutRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the sequence of Value Mappings in a Physical Layout. This can be more complex than a simple sequence. 

Examples
==========
The W3C Tabular Data on the Web specification allows for a list datatype. In the example below there are three top level InstanceVariables
PersonID – the person identifier
AgeYr – age in year
BpSys_Dia – blood pressure (a list containing Systolic and Diastolic values)

There are two variables at a secondary level of the hierarchy
Systolic – the systolic pressure
Diastolic – the diastolic pressure

The delimited file below uses the comma to separate "columns" and forward slash to separate elements of a blood pressure list.

PersonID, AgeYr, BpSys_Dia
1,22,119/67
2,68,122/70

The PhysicalRelationStructure in this case would describe a BpSys_Dia  list variable as containing an ordered sequence of the Systolic and Diastolic InstanceVariables.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalOrderRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalOrderRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
PhysicalStructureOrder orders thePhysicalRecordSegments  which map to a LogicalRecord.

Explanatory notes
===================
The same LogicalRecordLayout may be the sourceMember in several adjacency lists. This can happen when PhysicalRecordSegments are also population specific. In this instance each adjacency list associated with a LogicalRecordLayout is associated with a different population.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalRecordSegment"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalRecordSegment</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of each physical storage segment required to completely cover the logical record. A logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment.

Examples
==========
The file below has four InstanceVariables: PersonId, SegmentId, AgeYr, HeightCm. The data for each person (identified by PersonId) is recorded in two segments (identified by SegmentId), "a" and "b". AgeYr is on physical segment a, and HeightCm is on segment b. These are the same data as described in the UnitSegmentLayout documentation.
1 a  22
1 b 183
2 a 45
2 b 175


DDI 3.2 mapping
=================
p:PhysicalRecordSegmentType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RecordRelation"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RecordRelation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The RecordRelation object is used to indicate relationships among record types within and between LogicalRecords. For InstanceVariables existing in a LogicalRecord with multiple record layouts, pairs of InstanceVariables may function as paired keys to permit the expression of hierarchical links between records of different types. These links between keys in different record types could also be used to link records in a relational structure.

Examples
==========
One LogicalRecord containing a PersonIdentifier and a PersonName and another LogicalRecord containing a MeasurementID, a PersonID, a SystolicPressure, and a DiastolicPressure could be linked by a RecordRelation. The RecordRelation could employ an InstanceVariableValueMap to describe the linkage between  PersonIdentifier and PersonID.

Explanatory notes
===================
A household-level LogicalRecord might contain an InstanceVariable called HouseholdID and a person-level LogicalRecord might contain an InstanceVariable called HID. Describing a link between HouseholdID and HID would allow the linking of a person-level LogicalRecord to their corresponding household-level LogicalRecord.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SegmentByText"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SegmentByText</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the location of a segment of text through character, and optionally line, counts. An adequate description will always include a startCharacterPosition and then may include an endCharacterPosition or a characterLength.
If StartLine is specified, the character counts begin within that line.
An endCharacterPosition of 0 indicates that whole lines are specified


Examples
==========
The segment beginning at line 3, character 4 and ending at line 27 character 13.
Alternatively the segment beginning at character 257 and ending at character 1350 of the whole body of text.
StartLine of 10, endLine of 12, startCharacterPosition of 1, endCharacterPosition of 0 means all of lines 10,11, and 12.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataViewpoint"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataViewpoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The assignment of measure, identifier and attribute roles to InstanceVariables

Each of three roles within a UnitDataViewpoint is a SimpleCollection of instance variables. 

Examples
==========
Assigning 
PatientID the role of identifier
systolic the role of measure
diastolic the role of measure
device the role of attribute
time the role of attribute
position (sitting, standing) the role of attribute

Explanatory notes
===================
Viewpoint is a UnitDataViewpoint to underline that the composition of a UnitDataRecord viewpoint is different from the composition of DataCube viewpoint. The DataCube viewpoint is out of scope currently. 
It is sometimes useful to describe a set of variables and their roles within the set. In the blood pressure example above, values for a set of variables are captured in one setting - the taking of a blood pressure. Some of the variables may be the measures of interest, for example the systolic and diastolic pressure. Other variables may take on the role of identifiers, such as the hospital’s patient ID and a government ID such as the U.S. Social Security Number. A third subgroup of variables may serve as attributes. The age of the patient, whether she is sitting or standing, the time of day. The assignment of these three roles, identifier, measure, and attribute, is the function of the Viewpoint.
Viewpoints are not fixed attributes of variables. This is why there is a separate Viewpoint class which maps to InstanceVariables.   In the example above, the Viewpoint is within the context of the original measurement. In a reanalysis of the data the roles might change. Time of day might be the measure of interest in a study of hospital practices.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitSegmentLayout"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitSegmentLayout</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
UnitSegmentLayout supports the description of unit-record ("wide") data sets, where each row in the data set provides the same group of values for variables all relating to a single unit. Each logical column will contain data relating to the values for a single variable. 

Examples
==========
A simple spreadsheet. Commonly the first row of the table will contain variable names or descriptions.

The following csv file has a rectangular layout and would import into a simple table in a spreadsheet:
PersonId,AgeYr,HeightCm
1,22,183
2,45,175


Explanatory notes
===================
This is the classic rectangular data table used by most statistical packages, with rows/cases/observations and columns/variables/measurements. Each cell (DataPoint) in the table is the intersection of a Unit (row) and an InstanceVariable.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueMapping"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueMapping</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides physical characteristics for an InstanceVariable as part of a PhysicalSegmentLayout

Examples
==========
A variable "age" might be represented in a file as a string with a maximum length of 5 characters and a number pattern of ##0.0

Explanatory notes
===================
An InstanceVariable has details of value domain and datatype, but will not have the final details of how a value is physically represented in a data file. A variable for height, for example, may be represented as a real number, but may be represented as a string in multiple ways. The decimal separator might be, for example a period or a comma. The string representing the value of a payment might be preceded by a currency symbol. The same numeric value might be written as “1,234,567” or “1.234567 E6”. A missing value might be written as “.”, “NA”, “.R” or as “R”. 
The ValueMapping describes how the value of an InstanceVariable is physically expressed. The properties of the ValueMapping as intended to be compatible with the W3C Metadata Vocabulary for Tabular Data (https://www.w3.org/TR/tabular-metadata/ ) as well as common programming languages and statistical packages. The “format” property, for example can draw from an external controlled vocabulary such as the set of formats for Stata, SPSS, or SAS.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualContentView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
To review the conceptual concept structures and to manage concept systems (other than statistical classifications). The coverage go down to a RepresentedVariable. InstanceVariable has been included in the collection for use as a member of a VariableCollection. However it does not go into the detailed content of an InstanceVariable.

Restriction: 
InstanceVariable has been included for the sole purpose of membership in a VariableCollection. The classes required to completely describe an InstanceVariable have not been included.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystemCorrespondence"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystemCorrespondence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relationship between 2 or more ConceptSystems described through mapping similarity relationships between their member Concepts.

Examples
==========
Correspondence between the concepts used to define the populations in the censuses of two countries with similarity mapping of Concepts "Resident Population", "Labor Force", "Housing Unit", etc. 

Explanatory notes
===================
Describes correspondence with one or more Maps which identify a source and target concept and defines their commonality and difference using descriptive text and controlled vocabularies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualVariable"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Concept as a characteristic of a UnitType intended to be measured

Examples
==========
1. Sex of person
2. Number of employees 
3. Value of endowment

Explanatory notes
===================
Note that DDI varies from GSIM in the use of a UnitType rather than a Universe. "The use of a Concept as a characteristic of a Universe intended to be measured" [GSIM 1.1]

DDI 3.2 mapping
=================
c:ConceptualVariableType

GSIM mapping
==============
Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableCollection"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableCollection</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection (group) of any type of Variable within the Variable Cascade (Conceptual, Represented, Instance) for purposes of management, conceptualization or anything other than organizing a logical record or physical layout.

Examples
==========
Variables within a specific section of a study, Variables related to a specific subject or keyword. Variables at a specified level of development or review.

Explanatory notes
===================
A simple ordered or unordered list of variables can be described via a set of VariableIndicator parameters. An optional VariableRelationStructure can describe a more complex structure for the collection. We might, for example, use the VariableRelationStructure to group variables by content within a Study or across a StudySeries.

DDI 3.2 mapping
=================
l:VariableGroupType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
RelationStructure for use with any mixture of Variables in the Variable Cascade (Conceptual, Represented, Instance).

Explanatory notes
===================
A VariableCollection can be described as a simple list, or as having a more complex structure. All of the "administrative" variables for a study might be described as just a simple list without a VariableRelationStructure. If, however, the administrative variables needed to be described in subgroups, a VariableRelationStructure could be employed.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ControlledVocabularyView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The ControlledVocabulary view is intended to allow for the structured description of a vocabulary in DDI4. A vocabulary can be described as a simple set of terms and definitions, or a set of terms and definitions with a structure such as a hierarchy.

Use Cases:
A DDI4 ExternalControlledVocabularyEntry could reference a vocabulary entry described in DDI4. This would allow processing by software able to interpret DDI4. 
DDI4 has a set of controlled vocabularies https://www.ddialliance.org/controlled-vocabularies, currently described in Genericode. These could be published in DDI4 as well.
Vocabularies having a structure more complex than a simple table.

Target Audiences:
DDI4 user communities.

Restricted Classes:
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population, UnitType and Universe
ExternalMaterial is extended by ExternalAid

General Documentation:
The representation of a controlled vocabulary in DDI4 consists of four classes:
ControlledVocabulary – The structured collection of vocabulary entries
VocabularyEntry – Assigns a definition to a term
VocabularyRelationStructure – Allows for the description of a complex structure among the terms, such as a hierarchy
ExternalMaterial – Points to material outside of a current DDI4 instance.

The ControlledVocabulary uses a set of  VocabularyEntryIndicators to delineate the entries in the vocabulary. These may be ordered with an index.
The VocabularyRelationStructure uses a set of VocabularyEntryRelations to describe relationships among the vocabulary entries. A "source" entry might have a relationship to several "target" entries, for example one entry (e.g. Vehicle) might be a more general term for several other terms (e.g. car, bike, skateboard). This relationship may be described with a semantic, a relationSpecification (e.g. GeneralSpecific), and whether the relation is total or not. 
The diagram below shows all inherited properties for the vocabulary classes.
[image to be inserted here]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ControlledVocabulary"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ControlledVocabulary</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The specification of a controlled vocabulary defines a set of values and their definitions together with the order relationships among those entries.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VocabularyEntry"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VocabularyEntry</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
One entry term and its definition in an ordered list comprising a controlled vocabulary.

Examples
==========
aunt - The female sibling of a parent</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VocabularyRelationStructure"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VocabularyRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains the Vocabulary Relations used to structure the ControlledVocabulary</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomMetadataView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The DDI4 CustomMetadataView allows for the definition of a set of keys and their interrelationships. This structure can be shared and reused by a community. These keys can be used in key-value pairs to enter metadata that is more actionable than would be if an uncontrolled set of keys were employed. They could also be used in a NoSQL key/value store.

Use Cases:
User defined structures for notes. This corresponds to the UserAttributePair in DDI3.2, but allows for additional specification of a structure for the keys and a datatype and cardinalities for the values.
User defined structures for specifying the location of parts of qualitative objects. The example below shows the location of words or sentences from material arranged into volume, chapter, sentence and word
User defined structures for specifying the location of  parts of cited materials

Target Audiences:
Users of DDI4 needing structured extensions to be shared by their community. A user community, for example, could share the structure for locating material by volume, chapter, sentence and word.

Restricted Classes:
The list below displays each class in the View that is extended by classes not in the view.
Concept is extended by ConceptualVariable and Population.
ExternalMaterial is extended by ExternalAid.
Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.

General Documentation:
The keys and their interrelationships are defined in a CustomStructure which is a collection of CustomItems. Each CustomItem defines a key, giving it a cardinality and associating it with a RepresentedVariable and a ValueDomain. The set of CustomItems can be arranged into a structure, for example a hierarchy, by a CustomItemRelationStructure.
[image to be inserted]
Once the structure is defined, it can be used in a CustomInstance. This is a collection of CustomValues. A CustomValue contains a key-value pair where the key corresponds to a previously defined CustomItem. A CustomValue also may be associated with an InstanceVariable.  The CustomValues may also be structured by a CustomValueRelationStructure.
[image to be inserted]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomInstance"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomInstance</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of CustomValues to be attached to some object.

Examples
==========
A set of OMB required information about a question.

The set of openEHR protocol information to be attached to a blood pressure Capture</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomItem"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomItem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A custom item description. This allows the definition of an item which is a member of a CustomStructure.
It defines the minimum and maximum number of occurrences and representation of a CustomValue.

Examples
==========
DegreeOfBurden for a question as required by the U.S. OMB.

BloodPressureCuffSize - the size of a blood pressure cuff specified for a particular protocol.

Explanatory notes
===================
This definition will be referenced by a CustomValue when recording a key,value instance</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomItemRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomItemRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains a set of CustomItemRelations which together define the relationships of Custom Structure.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Collection containing a set of item descriptions defining a structure for a set of key,value pairs

Examples
==========
The set of CustomItems which are to be used to document the OMB required information for a question.

The set of CustomItems used to describe an openEHR blood pressure protocol.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomValue"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomValue</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance of a  key, value pair for a  particular  key.

Examples
==========
OMBBurden,"High"

openEHRBPposition, "upper arm"</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataCaptureInstrumentView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The purpose of the DDI4 Data Capture Instrument View is to describe the processes of developing- and collect data from a questionnaire instrument, as well as to describe the capture or acquiring of measurements from various sources, like databases, registries, administrative data, bio-medical devices, environmental sensors, or any other source or instrument. The focus on measurement is new in DDI4 compared to earlier versions of the standard.

Use Cases:
Document  the development process for a conceptual questionnaire of an international survey
Design an implemented questionnaire in a specific mode and for a specific population
View how a measurement has been captured or how a survey question has been asked
Reuse of instrument components developed for a different study
Export instrument related metadata between applications
Design a measurement
Describe a measurement  instrument 

Target Audiences:
Developers of conceptual instruments, for example for an international survey
Designers of implemented instruments for surveys and measurements
Designers and developers of data capture tools
Researchers wishing to understand how a measurement has been captured or how a survey question was asked or how it was developed
DDI4 users in general

Restricted Classes:
WorkflowStepSequence is extended by StructuredWorkflowSteps.
RepresentedVariable is extended by InstanceVariable.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
ConceptualVariable is extended by InstanceVariable
Concept is extended by InstanceVariable, Population and UnitType;
ExternalMaterial is extended by ExternalAid.
Code is extended by ClassificationItem.

General Documentation:
Questionnaire development – a brief overview

The goal of questionnaire design is to develop an ImplementedInstrument from which data can be captured when put in field. 

The first step in a questionnaire design process is often to select or define the topics and the Concepts to be measured by the questions in the instrument. 
The concepts are then operationalized into RepresentedQuestions that contains the more reusable components of a question that can be reused among different surveys, studies and modes of collection.
InstanceQuestions realize the represented questions in an instrument. It connects to other InstrumentComponents like for example a showcard or other ExternalAid and Instructions, and links the question to the flow logic of the questionnaire. 
The ConceptualInstrument represents the instrument independent of mode. It organizes the instrument by connecting the instrument components to WorkflowStepSequence that realizes the flow of a questionnaire sequence, including conditions IfThenElse, Loop etc.. 
The ImplementedInstrument has a specific mode and is designed or adapted for a specific sample or population. Two different implemented instruments may use the same conceptual instrument. 

Measurement 

Measurements are non-question based data captures like for example blood pressure measurements, MRI images, thermometer, web-service, and experimental observations.
Measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement is a description of the components of a measurement, that can be reused by multiple or repeated studies.
The ImplementedMeasurement initiates the represented measurement so that it can be used in the data capture process. Other InstrumentComponents like Instructions and ExternalAids associated with the measurement can be linked to the implemented instrument.
The ConceptualInstrument represents the reusable components of the instrument that can have different concrete implementations. It connects to the WorkflowStepSequence that realizes the instrument flow. A WorkflowStep can be linked to a WorkflowService that involves agents and services involved in the process step.
The ImplementedInstrument is a specific implementation of a conceptual instrument.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BooleanResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BooleanResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a binary response, such as selected/unselected or checked/unchecked or true/false.

Explanatory notes
===================
Exactly what is captured may be dependent upon the Implemented Instrument, however the response being captured is either there or not there (ON/OFF, True/False)</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeListResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeListResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a coded response (where both codes and their related category value are displayed) for a question. This response domain allows the single selection of one coded response.

DDI 3.2 mapping
=================
d:CodeDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualInstrument"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Design plan for creating a data capture tool. 

Examples
==========
Design of a questionnaire regardless of mode; Design of an experiment

Explanatory notes
===================
A single ConceptualInstrument would contain workflow sequences of the intended flow logic of the instrument, which could be implemented as a web survey or paper survey, utilizing the same sequence and questions.
Similarly a single ConceptualInstrument would contain workflow sequences of the intended flow logic of the instrument, which could be implemented as a protocol delivered by a nurse or by self-administration.

Synonyms
==========
Idea; Intention; Theory; Design; LogicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualVariable"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Concept as a characteristic of a UnitType intended to be measured

Examples
==========
1. Sex of person
2. Number of employees 
3. Value of endowment

Explanatory notes
===================
Note that DDI varies from GSIM in the use of a UnitType rather than a Universe. "The use of a Concept as a characteristic of a Universe intended to be measured" [GSIM 1.1]

DDI 3.2 mapping
=================
c:ConceptualVariableType

GSIM mapping
==============
Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalAid"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalAid</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Any external material used in an instrument that aids or facilitates data capture, or that is presented to a respondent and about which measurements are made. 

Examples
==========
Image, link, external aid, stimulus, physical object.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ImplementedInstrument"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ImplementedInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific data capture tool.  ImplementedInstruments are mode and/or unit specific.

Examples
==========
Two versions of a conceptual instrument, computer assisted personal interviewing (CAPI) and mail, would be separate ImplementedInstruments. These might both reference the same ConceptualInstrument. 
A piece of equipment used to measure blood pressure.


Synonyms
==========
aka PhysicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceMeasurement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance measurement instantiates a represented measurement, so that it can be used as an Act in the Process Steps that define a data capture process.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceQuestion"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance question is an instantiation of a represented question,to be used as an Act in the process steps that define a survey questionnaire.

Examples
==========
“How old are you?”</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Instruction"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Instruction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the content and description of data capture instructions. Contains the "how to" information for administering an instrument.

Examples
==========
Completion instructions in self-administered mail questionnaire, information for administering a blood pressure measurement, interviewer instructions for a CATI questionnaire, guidance for communicating between an interviewer and a respondent (note MIDUS cognitive assessment example).

DDI 3.2 mapping
=================
d:InstructionType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstrumentCode"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstrumentCode</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An InstrumentComponent that specifies the performance of a specific computation within the context of an instrument flow.

Examples
==========
quality control, edit check, checksums, compute filler text, compute values for use in administering the instrument

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:NumericResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:NumericResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a numeric response (the intent is to analyze the response as a number) for a question.

Examples
==========
Systolic blood pressure level, as an integer from 0 to 200

DDI 3.2 mapping
=================
d:NumericDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RankingResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RankingResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a ranking response which supports a "ranking" or "Ordering" of provided categories. 
Note: This item still must be modeled and is incomplete at this time.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedMeasurement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable non-question measurement that can be used as a template that describes the components of a measurement. A type code can be used to describe the type of measure that was used.

Examples
==========
A measure providing a geographic point; A blood pressure protocol; A protocol for measuring an ocean current

Explanatory notes
===================
Non-question measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement allows the reusable format and protocol to be housed in a repository for use by multiple studies or repeated studies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedQuestion"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable question, that can be used as a template that describes the components of a question

Examples
==========
A question in a question bank such as the content and format for a question on Race for all survey/censuses fielded by U.S. agencies as prescribed by the U.S. Office of Management and Budget (OMB)

Explanatory notes
===================
A question that is repeated across waves of a panel study can be reused and also allow reference to a RepresentedVariable. A question that has been tested for consistency of response and is used by multiple studies.

DDI 3.2 mapping
=================
d:QuestionItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ScaleResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ScaleResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a scaled response, such as a Likert scale. 
Note: This item still must be modeled and is incomplete at this time.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Statement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Statement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Statement is a type of Instrument Component containing  human readable text or referred material. 

Examples
==========
Introductory text; Explanations; Labels, Headers, Help screens, etc.  "Thank you for agreeing to take this survey. We will start with a brief set of demographic questions." "The following set of questions are related to your household income. Please consider all members of the household and all sources of income when answering these questions."

Explanatory notes
===================
It is not directly related to another specific Instrument Component such as an InstanceQueston or InstanceMeasurement. It may be placed anywhere in a WorkflowStepSequence. 

Synonyms
==========
DDI:StatementItem

DDI 3.2 mapping
=================
d:StatementItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TextResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TextResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a textual response including the length of the text and restriction of content using a regular expression.

Examples
==========
Collecting the first name on an individual in an open ended text field

DDI 3.2 mapping
=================
r:TextDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRegistryView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Agent Registry View supports the creation of a listing of Agents (Organization, Individual, Machine) for the purpose of maintenance and reuse. The listing of Agents can be organized as simple lists or in more complicated structures through the use of an AgentRelationStructure. These may be typed and provided with effective date ranges either for the whole AgentRelationStructure or for individual AgentRelations. 
Complex relationships may be described among Individuals or among Organizations or among Machines. Relationships between members of these classes may also be described.


Use Cases:
Maintaining a listing of all Organizations and Individuals related to a project or statistical activities, i.e. Individuals and Organizations related to the IPUMS projects at the Minnesota Population Center or the Departments and Individuals involved in the production of the Australian Census within the Australian Bureau of Statistics.
Organizational affiliations of Individuals. 
Collaboration networks or other social networks.


Target Audience:
Organizations working with a number of Individuals and Organizations whose descriptive information and interrelationships change over time.

Included Classes: Agent Listing, Agent Relation Structure, Organization, Individual, Machine, and External Material. 

Restricted Classes:
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population, UnitType and Universe
ExternalMaterial is extended by ExternalAid


General Documentation:
The primary class is the Agent List which can be structured by AgentRelationStructure. Agents may be of any type supported by DDI at the time of this release. Agent relationships can be defined using the adjacency list Agent Relation within AgentRelationStructure. specifying the RelationshipSpecification (Equality, Parent/Child, Whole/Part, etc.), a relevant semantic such as a specific role or relationship type, and effective time span for the relationship.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentListing"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentListing</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A listing of Agents of any type. The AgentList may be organized to describe relationships between members using AgentRelationStructure.

Examples
==========
Organizations contributing to a project. Individuals within an agency. All organizations, indivduals, and machines identified within the collections of an archive.

Explanatory notes
===================
Relationships between agents are fluid and reflect effective dates of the relationship. An agent may have multiple relationships which may be sequencial or concurrent. Relationships may or may not be hierarchical in nature. All Agents are serialized individually and brought into relationships as appropriate.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRelationStructure"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Agents in a collection. Clarifies valid period and the purpose the relationship serve

Examples
==========
An individual employed by an Organization. A unit or project (organization) within another Organization.

Explanatory notes
===================
Describes relations between agents not roles within a project or in relationship to a product. Roles are defined by the parent class and relationship name that uses an Agent as a target.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StructuredDataTypes_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Conceptual_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SimpleCodebook_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SimpleMethodologyOverview_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RegularExpressions_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicClassification_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:FormatDescription_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomMetadata_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingMethodology_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudyRelated_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Enumerations_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessWorkflow_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Utility_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Workflows_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Methodologies_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Discovery_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataCapture_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Identification_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalDataDescription_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:XMLSchemaDatatypes_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:XMLSchemaDatatypes_Package</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">This package comprehends XML Schema datatypes which are used in the DDI model.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Agents_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Representations_Package"/>
        <Class abbreviatedIRI="ddi:ddi4_model"/>
    </SubClassOf>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DescriptiveCodebookView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
This view is intended to provide a structure for the information needed to understand and make intelligent use of a set of data without other communication from the person or organization producing the data. It can be used to move the data into and among multiple software platforms. This information is useful for discovery of the data.

The view includes basic information about how the data were collected, but does not provide machine actionable details.

The view provides information about:
Variables and the representation of the data for each, 
Basic statistics for individual variables
Universe and population, 
Spatial, temporal, and topical coverage
The study under which the data were created
Overviews of Methodology, Design, and Process
Physical storage


Use Cases:
Basic search to find data (general search, known item search) by users looking to use data. 
--Searches by variable, coverage, creators, time frame, population, methodology and more
Machine actionable ingest to statistical software allowing users to analyze the data
--An open standard for representing the metadata needed to read the data 
Informational content to support intelligent use and understanding of the data
--The essential information for interpreting and using the data (e.g. units of measurement, relevant population)


Target Audiences:
Individual researchers, research groups, National Statistical Organizations focusing on stand-alone codebooks, students, instructors, archives, and libraries. Software tool makers.

Restricted Classes:
DesignOverview references Precondition, Goal, and WorkflowProcess
InstanceVariable references RepresentedVariable, and ConceptualVariable, and the abstract class Act(InstrumentComponent, ComputationAction, StudyControl, and MetadataDrivenAction)
Methodology references Methodology
ProcessOverview references ProcessSequence
RepresentedMeasurement references ExternalAid
RepresentedQuestion references ExternalAid
SamplingProcedure references SamplingDesign, SamplingAlgorithm, and SamplingProcess
SentinelConceptualDomain references ConceptualSystem
SpatialCoverage references GeographicUnitClassification, and GeographicUnitTypeClassification
Study references AuthorizationSource
SubstantativeConceptualDomain references ConceptualSystem</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Access"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Access</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes access to the annotated object. This item includes a confidentiality statement, descriptions of the access permissions required, restrictions to access, citation requirements, depositor requirements, conditions for access, a disclaimer, any time limits for access restrictions, and contact information regarding access.

Examples
==========
A proprietary InstanceQuestion might have specific access restrictions.

DDI 3.2 mapping
=================
a:AccessType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentListing"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentListing</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A listing of Agents of any type. The AgentList may be organized to describe relationships between members using AgentRelationStructure.

Examples
==========
Organizations contributing to a project. Individuals within an agency. All organizations, indivduals, and machines identified within the collections of an archive.

Explanatory notes
===================
Relationships between agents are fluid and reflect effective dates of the relationship. An agent may have multiple relationships which may be sequencial or concurrent. Relationships may or may not be hierarchical in nature. All Agents are serialized individually and brought into relationships as appropriate.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Agents in a collection. Clarifies valid period and the purpose the relationship serve

Examples
==========
An individual employed by an Organization. A unit or project (organization) within another Organization.

Explanatory notes
===================
Describes relations between agents not roles within a project or in relationship to a product. Roles are defined by the parent class and relationship name that uses an Agent as a target.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AlgorithmOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AlgorithmOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, algorithm statement used to describe the overall methodology. 

Explanatory notes
===================
This would most commonly be used in a Codebook along with a MethodologyOverview and a DesignOverview.The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AttributeRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AttributeRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An AttributeRole identifies one or more InstanceVariables as being attributes within a ViewPoint. An AttributeRole is a SimpleCollection of InstanceVariables acting in the AttributeRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no



Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint.
An InstanceVariable with an AttributeRole assigned might contain data about the conditions under which the MeausreRole InstanceVariables were collected or other paradata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AuthorizationSource"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AuthorizationSource</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the authorizing agency and allows for the full text of the authorization (law, regulation, or other form of authorization).

Examples
==========
 May be used to list authorizations from oversight committees and other regulatory agencies.

Explanatory notes
===================
Supports requirements for some statistical offices to identify the agency or law authorizing the collection or management of data or metadata.

Synonyms
==========
Use for the Case Law, Case Law Description, and Case Law Date properties in ClassificationItem

DDI 3.2 mapping
=================
r:AuthorizationSourceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Budget"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Budget</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of the budget for any of the main publication types that can contain a reference to an external budget document.

DDI 3.2 mapping
=================
r:BudgetType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComplianceStatement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComplianceStatement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for a quality statement based on frameworks to be described using itemized properties. A reference to a concept, a coded value, or both can be used to specify the property from the standard framework identified in StandardUsed. Usage can provide further details or a general description of compliance with a standard.

DDI 3.2 mapping
=================
r:ComplianceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Coverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Coverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Coverage information for an annotated object. Includes coverage information for temporal, topical, and spatial coverage. 

Examples
==========
A survey might have ask people about motels they stayed in (topical coverage) in the year 2015 (temporal coverage), while they were travelling in Kansas (spatial coverage). This is different than the temporal, and spatial attributes of the population studied – (international travelers to the US surveyed in 2017).

Explanatory notes
===================
Coverage is a container for the more specific temporal, spatial, and topical coverages to which it refers.

DDI 3.2 mapping
=================
r:CoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPoint"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPoint is a container for a Datum.

Examples
==========
A cell in a spreadsheet table. Note that this could be empty. It exists independently of the value to be stored in it.

Explanatory notes
===================
The DataPoint is structural and distinct from the value (the Datum) that it holds. [GSIM 1.1]

GSIM mapping
==============
Data Point</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPointRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPointRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means for describing the complex relational structure of Data Points in a Logical Record</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Datum"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Datum</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Datum is a designation (a representation of a concept by a sign) with a notion of equality defined. The sign itself is a perceivable object.

Examples
==========
A systolic blood pressure of 122 is measured. The Signifier for that measurement in this paragraph is the character string "122". The Datum in this case is a kind of Designation (Sign), which is the association of the underlying measured concept (a blood pressure at that level) with that Signifier.  The Datum has an association with an InstanceVariable which allows the attachment of a unit of measurement (mm Hg), a datatype, a Population, and the Act which produced the measurement.  These InstanceVariable attributes are critical for interpreting the Signifier.

Explanatory notes
===================
From GSIM 1.1 "A Datum is the actual instance of data that was collected or derived. It is the value which populates one or more Data Points. A Datum is the value found in a cell of a table." (https://statswiki.unece.org/display/GSIMclick/Datum )  A Datum could be copied to one or more datasets.
DDI4 takes a little more formal (semiotic) description of a Datum using the Signification Pattern. See the attached example.


NOTE: This is NOT datum from DDI3.2 (which is quite specific).

GSIM mapping
==============
Datum</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DesignOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DesignOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, design statement The design may be used to specify how a process will be performed in general. This would most commonly be used in a Codebook along with an AlgorithmOverview and a MethodologyOverview. The design informs a specific or implemented process as to its general parameters. Supports specification of any realization of Goal. 


Explanatory notes
===================
Allows for the use of any realized Process. The methodology, design, and algorithm of a specific realized process should be used if available. The use of a generic Process such as a WorkflowProcess containing an Act would be appropriate here. Restriction would be done by inclusion of the appropriate realized process class(es) in a Functional View.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Embargo"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Embargo</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides information about data that are not currently available because of policies established by the principal investigators and/or data producers. Embargo provides a name and label of the embargo, the dates covered by the embargo, the rationale or reason for the embargo, a reference to the agency establishing the embargo, and a reference to the agency enforcing the embargo.

DDI 3.2 mapping
=================
r:EmbargoType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExPostEvaluation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExPostEvaluation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Evaluation for the purpose of reviewing the study, data collection, data processing, or management processes. Results may feed into a revision process for future data collection or management. Identifies the type of evaluation undertaken, who did the evaluation, the evaluation process, outcomes and completion date.

DDI 3.2 mapping
=================
r:ExPostEvaluationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalAid"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalAid</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Any external material used in an instrument that aids or facilitates data capture, or that is presented to a respondent and about which measurements are made. 

Examples
==========
Image, link, external aid, stimulus, physical object.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:FundingInformation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:FundingInformation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides information about the individual, agency and/or grant(s) which funded the described entity. Lists a reference to the agency or individual as described by a DDI Agent, the role of the funder, the grant number(s) and a description of the funding activity.

Examples
==========
A "millionaire grant" (funding description) from John Beresford Tipton, Jr. (individual). Exploration of the effect of sudden wealth and basis for a television episode (funder role).

DDI 3.2 mapping
=================
r:FundingInformationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IdentifierRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IdentifierRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An IdentifierRole identifies one or more InstanceVariables as being identifiers within a ViewPoint. An IdentifierRole is a SimpleCollection of InstanceVariables acting in the IdentifierRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ImplementedInstrument"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ImplementedInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific data capture tool.  ImplementedInstruments are mode and/or unit specific.

Examples
==========
Two versions of a conceptual instrument, computer assisted personal interviewing (CAPI) and mail, would be separate ImplementedInstruments. These might both reference the same ConceptualInstrument. 
A piece of equipment used to measure blood pressure.


Synonyms
==========
aka PhysicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Instruction"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Instruction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the content and description of data capture instructions. Contains the "how to" information for administering an instrument.

Examples
==========
Completion instructions in self-administered mail questionnaire, information for administering a blood pressure measurement, interviewer instructions for a CATI questionnaire, guidance for communicating between an interviewer and a respondent (note MIDUS cognitive assessment example).

DDI 3.2 mapping
=================
d:InstructionType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MeasureRole"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MeasureRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A MeasureRole identifies one or more InstanceVariables as being measures within a ViewPoint. A MeasureRole is a SimpleCollection of InstanceVariables acting in the MeasureRole.



Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MethodologyOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MethodologyOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative methodology statement used to describe the overall methodology, identify related design, algorithm, and process information. A methodology is normally informed by earlier research and clarifies how earlier research methods were incorporated into the current work. 



Examples
==========
The target of the relationship from Study: "hasMethodology"


Explanatory notes
===================
This would most commonly be used in a Codebook along with an AlgorithmOverview and a DesignOverview. Note that Process may be described in more detail than a high level overview.
Note that the algorithm may be implemented by multiple processes which are not limited to any specific type of Process. This can be constrained by the inclusion of only specific realizations of Process within a Functional View. Note that this MethodologyOverview can be used as a collective description of specific methodologies used by a Study or other broad set of metadata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalDataSet"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalDataSet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The information needed for understanding the physical structure of data coming from a file or other source. A StructureDescription also points to the Data Store it physically represents.

Examples
==========
The PhysicalDataProduct is the entry point for information about a file or other source. It includes information about the name of a file, the structure of segments in a file and the layout of segments.

Explanatory notes
===================
Multiple styles of structural description are supported: including describing files as unit-record (UnitSegmentLayout) files; describing cubes; and describing event-history (spell) data.

DDI 3.2 mapping
=================
p:PhysicalDataProductType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalLayoutRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalLayoutRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the sequence of Value Mappings in a Physical Layout. This can be more complex than a simple sequence. 

Examples
==========
The W3C Tabular Data on the Web specification allows for a list datatype. In the example below there are three top level InstanceVariables
PersonID – the person identifier
AgeYr – age in year
BpSys_Dia – blood pressure (a list containing Systolic and Diastolic values)

There are two variables at a secondary level of the hierarchy
Systolic – the systolic pressure
Diastolic – the diastolic pressure

The delimited file below uses the comma to separate "columns" and forward slash to separate elements of a blood pressure list.

PersonID, AgeYr, BpSys_Dia
1,22,119/67
2,68,122/70

The PhysicalRelationStructure in this case would describe a BpSys_Dia  list variable as containing an ordered sequence of the Systolic and Diastolic InstanceVariables.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalOrderRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalOrderRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
PhysicalStructureOrder orders thePhysicalRecordSegments  which map to a LogicalRecord.

Explanatory notes
===================
The same LogicalRecordLayout may be the sourceMember in several adjacency lists. This can happen when PhysicalRecordSegments are also population specific. In this instance each adjacency list associated with a LogicalRecordLayout is associated with a different population.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalRecordSegment"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalRecordSegment</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of each physical storage segment required to completely cover the logical record. A logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment.

Examples
==========
The file below has four InstanceVariables: PersonId, SegmentId, AgeYr, HeightCm. The data for each person (identified by PersonId) is recorded in two segments (identified by SegmentId), "a" and "b". AgeYr is on physical segment a, and HeightCm is on segment b. These are the same data as described in the UnitSegmentLayout documentation.
1 a  22
1 b 183
2 a 45
2 b 175


DDI 3.2 mapping
=================
p:PhysicalRecordSegmentType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ProcessOverview"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ProcessOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Process is an implementation of an algorithm. It is the series of steps taken as a whole. It is decomposable into ProcessSteps, but this decomposition is not necessary. 

Examples
==========
In descriptive document regarding ingest of a study into a repository: "Validation processes were run comparing all data against the provided documentation to check for out-of-range and invalid content."

Explanatory notes
===================
In a descriptive document, Process Overview provides a means of presenting the reader with a clear view of an overall process without going into the details of the process steps. Process Overview should be used when a description of the process in general is all that is desired.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:QualityStatement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:QualityStatement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A statement of quality which may be related to an external standard or contain a simple overview, rationale, and usage statement. When relating to an external standard information on compliance may be added via the ComplianceStatement referenced by the Standard class.

DDI 3.2 mapping
=================
r:QualityStatementType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RecordRelation"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RecordRelation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The RecordRelation object is used to indicate relationships among record types within and between LogicalRecords. For InstanceVariables existing in a LogicalRecord with multiple record layouts, pairs of InstanceVariables may function as paired keys to permit the expression of hierarchical links between records of different types. These links between keys in different record types could also be used to link records in a relational structure.

Examples
==========
One LogicalRecord containing a PersonIdentifier and a PersonName and another LogicalRecord containing a MeasurementID, a PersonID, a SystolicPressure, and a DiastolicPressure could be linked by a RecordRelation. The RecordRelation could employ an InstanceVariableValueMap to describe the linkage between  PersonIdentifier and PersonID.

Explanatory notes
===================
A household-level LogicalRecord might contain an InstanceVariable called HouseholdID and a person-level LogicalRecord might contain an InstanceVariable called HID. Describing a link between HouseholdID and HID would allow the linking of a person-level LogicalRecord to their corresponding household-level LogicalRecord.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedMeasurement"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable non-question measurement that can be used as a template that describes the components of a measurement. A type code can be used to describe the type of measure that was used.

Examples
==========
A measure providing a geographic point; A blood pressure protocol; A protocol for measuring an ocean current

Explanatory notes
===================
Non-question measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement allows the reusable format and protocol to be housed in a repository for use by multiple studies or repeated studies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedQuestion"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable question, that can be used as a template that describes the components of a question

Examples
==========
A question in a question bank such as the content and format for a question on Race for all survey/censuses fielded by U.S. agencies as prescribed by the U.S. Office of Management and Budget (OMB)

Explanatory notes
===================
A question that is repeated across waves of a panel study can be reused and also allow reference to a RepresentedVariable. A question that has been tested for consistency of response and is used by multiple studies.

DDI 3.2 mapping
=================
d:QuestionItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcedure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcedure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sampling Procedure describes the population being sampled, the sampling frame and the sampling plan including steps and sub steps by referencing the universe, sample frames and sampling plans described in schemes. Target sample sizes for each stage can be noted as well as the process for determining sample size, the date of the sample and the person or organization responsible for drawing the sample.

Examples
==========
Census of Population and Housing, 1980 Summary Tape File 4, chapter on Technical Information. Overview is the Introduction generally describing the sample; there is a sample design section which provides a more detailed overview of the design. Additional external documentation provides detailed processes for sample adjustments needed for small area estimations, sample frames etc.

Explanatory notes
===================
This is a summary of the methodology of sampling providing both an overview of purpose and use of a particular sampling approach and optionally providing specific details regarding the algorithm, design, and process of selecting a sample.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SegmentByText"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SegmentByText</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the location of a segment of text through character, and optionally line, counts. An adequate description will always include a startCharacterPosition and then may include an endCharacterPosition or a characterLength.
If StartLine is specified, the character counts begin within that line.
An endCharacterPosition of 0 indicates that whole lines are specified


Examples
==========
The segment beginning at line 3, character 4 and ending at line 27 character 13.
Alternatively the segment beginning at character 257 and ending at character 1350 of the whole body of text.
StartLine of 10, endLine of 12, startCharacterPosition of 1, endCharacterPosition of 0 means all of lines 10,11, and 12.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SpatialCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SpatialCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of spatial coverage (geographic coverage) of the annotated object. Spatial coverage is described using a number of objects that support searching by a wide range of systems (geospatial coordinates, geographic classification systems, and general systems using dcterms:spatial).

Examples
==========
A country, a neighborhood, the inside of a polygon on the surface of the earth, along a street, at a particular intersection, or perhaps even in a certain orbit around the planet Mars. For a data set within a study this may be used to define the geographic restriction of the data set within the geographic coverage of the study (eg. The study may cover all of Sweden but the spatial coverage of the data set is Stockholm). 

Explanatory notes
===================
Different systems support different approaches to descriptions of geographic or spatial coverage. Dublin Core has a descriptive text field that is the equivalent of SpatialCoverage/description. Geographers need to understand the spatial objects available (spatialObject, highest and lowest level geography, geographic units and unit types) so they know the building blocks they have to create a map. Spatial search engines do a first pass search by a simple bounding box (the north and south latitudes and east and west longitudes that define the spatial coverage area). Spatial Coverage provides basic support for all of these uses.

Synonyms
==========
r:SpatialCoverage, place</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Standard"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Standard</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the external standard used and describes the level of compliance with the standard in terms specific aspects of the standard's content.

DDI 3.2 mapping
=================
r:StandardType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StandardWeight"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StandardWeight</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an identified value for a standard weight expressed as an xs:float. This object may be referenced by a variable or statistic and used as a weight for analysis.

Examples
==========
A simple sample survey without an individual weight variable will have a StandardWeight to be used on all cases: 1% sample has a sample weight of 100

Explanatory notes
===================
A simple random sample survey without an individual weight variable will have a StandardWeight to be used on all cases. This is common when the sample is a simple random sample of a population with no oversampling to provide larger case counts for small populations.

DDI 3.2 mapping
=================
d:StandardWeightType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Study"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Study</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Study is the conceptual anchor for an individual collection activity resulting in a data set or data file. It can be both a part of a StudySeries as a wave etc. or an unrelated activity like a single survey project.

Examples
==========
ICPSR study 35575 Americans and the Arts [1973 - 1992] (ICPSR 35575). https://www.icpsr.umich.edu/icpsrweb/ICPSR/studies/35575?dataFormat%5B0%5D=SAS&amp;keyword%5B0%5D=public+opinion&amp;geography%5B0%5D=United+States&amp;searchSource=revise  

Explanatory notes
===================
The Study class brings together many properties and relationships describing a set of data – coverage, kind of data, methodology, citation information, access information and more.

DDI 3.2 mapping
=================
s:StudyUnitType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudyRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StudyRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for a complex nested structure for a Study Series</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StudySeries"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StudySeries</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection of studies which can be structured as a simple sequence, or with a more complex structure.

Examples
==========
An annual series of surveys.

Explanatory notes
===================
A set of studies may be defined in many ways. A study may be repeated over time. One or more studies may attempt to replicate an earlier study. The StudySeries allows for the description of the relationships among a set of studies.

A simple ordered or unordered sequence of studies can be described via the "contains StudyIndicator" property. More complex relationships among studies may also be described using the optional "isStructuredBy StudyRelationsStructure".</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TemporalCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TemporalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the temporal coverage of the annotated object by specifying dates and optionally associating them with Subject and Keyword. The date itself may be expressed as either and ISO and/or NonISO date. Dates may be catagorized by use of optional typeOfDate using and external controlled vocabulary entry.

Explanatory notes
===================
The association of subjects or keywords with the date periods allows for describing the meaning of the temporal period. A survey, for example might be administered in one time period, but ask questions about the preceding decade. Temporal coverage might then include the data collection coverage as well as the referenced time period.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TopicalCoverage"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TopicalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the topical coverage of the module using Subject and Keyword. Subjects are members of structured classification systems such as formal subject headings in libraries. Keywords may be structured (e.g. TheSoz thesauri) or unstructured and reflect the terminology found in the document and other related (broader or similar) terms.

DDI 3.2 mapping
=================
r:TopicalCoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataViewpoint"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataViewpoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The assignment of measure, identifier and attribute roles to InstanceVariables

Each of three roles within a UnitDataViewpoint is a SimpleCollection of instance variables. 

Examples
==========
Assigning 
PatientID the role of identifier
systolic the role of measure
diastolic the role of measure
device the role of attribute
time the role of attribute
position (sitting, standing) the role of attribute

Explanatory notes
===================
Viewpoint is a UnitDataViewpoint to underline that the composition of a UnitDataRecord viewpoint is different from the composition of DataCube viewpoint. The DataCube viewpoint is out of scope currently. 
It is sometimes useful to describe a set of variables and their roles within the set. In the blood pressure example above, values for a set of variables are captured in one setting - the taking of a blood pressure. Some of the variables may be the measures of interest, for example the systolic and diastolic pressure. Other variables may take on the role of identifiers, such as the hospital’s patient ID and a government ID such as the U.S. Social Security Number. A third subgroup of variables may serve as attributes. The age of the patient, whether she is sitting or standing, the time of day. The assignment of these three roles, identifier, measure, and attribute, is the function of the Viewpoint.
Viewpoints are not fixed attributes of variables. This is why there is a separate Viewpoint class which maps to InstanceVariables.   In the example above, the Viewpoint is within the context of the original measurement. In a reanalysis of the data the roles might change. Time of day might be the measure of interest in a study of hospital practices.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitSegmentLayout"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitSegmentLayout</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
UnitSegmentLayout supports the description of unit-record ("wide") data sets, where each row in the data set provides the same group of values for variables all relating to a single unit. Each logical column will contain data relating to the values for a single variable. 

Examples
==========
A simple spreadsheet. Commonly the first row of the table will contain variable names or descriptions.

The following csv file has a rectangular layout and would import into a simple table in a spreadsheet:
PersonId,AgeYr,HeightCm
1,22,183
2,45,175


Explanatory notes
===================
This is the classic rectangular data table used by most statistical packages, with rows/cases/observations and columns/variables/measurements. Each cell (DataPoint) in the table is the intersection of a Unit (row) and an InstanceVariable.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueMapping"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueMapping</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides physical characteristics for an InstanceVariable as part of a PhysicalSegmentLayout

Examples
==========
A variable "age" might be represented in a file as a string with a maximum length of 5 characters and a number pattern of ##0.0

Explanatory notes
===================
An InstanceVariable has details of value domain and datatype, but will not have the final details of how a value is physically represented in a data file. A variable for height, for example, may be represented as a real number, but may be represented as a string in multiple ways. The decimal separator might be, for example a period or a comma. The string representing the value of a payment might be preceded by a currency symbol. The same numeric value might be written as “1,234,567” or “1.234567 E6”. A missing value might be written as “.”, “NA”, “.R” or as “R”. 
The ValueMapping describes how the value of an InstanceVariable is physically expressed. The properties of the ValueMapping as intended to be compatible with the W3C Metadata Vocabulary for Tabular Data (https://www.w3.org/TR/tabular-metadata/ ) as well as common programming languages and statistical packages. The “format” property, for example can draw from an external controlled vocabulary such as the set of formats for Stata, SPSS, or SAS.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableCollection"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableCollection</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection (group) of any type of Variable within the Variable Cascade (Conceptual, Represented, Instance) for purposes of management, conceptualization or anything other than organizing a logical record or physical layout.

Examples
==========
Variables within a specific section of a study, Variables related to a specific subject or keyword. Variables at a specified level of development or review.

Explanatory notes
===================
A simple ordered or unordered list of variables can be described via a set of VariableIndicator parameters. An optional VariableRelationStructure can describe a more complex structure for the collection. We might, for example, use the VariableRelationStructure to group variables by content within a Study or across a StudySeries.

DDI 3.2 mapping
=================
l:VariableGroupType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
RelationStructure for use with any mixture of Variables in the Variable Cascade (Conceptual, Represented, Instance).

Explanatory notes
===================
A VariableCollection can be described as a simple list, or as having a more complex structure. All of the "administrative" variables for a study might be described as just a simple list without a VariableRelationStructure. If, however, the administrative variables needed to be described in subgroups, a VariableRelationStructure could be employed.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableStatistics"/>
        <Class abbreviatedIRI="ddi:DescriptiveCodebookView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableStatistics</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains summary and category level statistics for the referenced variable.

Examples
==========
A mean of values for a variable "Height". Counts for each level of variable "Gender" (male and female)

Explanatory notes
===================
 Includes information on the total number of responses, the weights in calculating the statistics, variable level summary statistics, and category statistics. The category statistics may be provided as unfiltered values or filtered through a single variable. For example the category statistics for Sex filtered by the variable Country for a multi-national data file. Note that if no weighting factor is identified, all of the statistics provided are unweighted.

DDI 3.2 mapping
=================
pi:VariableStatisticsType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Sampling View covers the methodology and process for drawing a sample from a designated sample frame. It provides the ability to describe sample designs from simple single stage samples to those with multiple stages and ones with more than one frame (necessitating drawing subsets of the sample from each frame). Probability sampling, including model-based, and non-probability sampling can each be described. The descriptive information of the methodologies used, design of the sample, algorithms to support the drawing of the sample, goals, sample frames used, and guidance on the use of the resulting sample (for defining weights, limitations, etc.) are supported. This includes the use of the Workflows which can define the process of creating simple or complex samples on a step-by-step basis. Can be used as metadata to drive sample selection.

Use Cases:
Defining Sample Frames for prospective use
Describing the process of simple or complex sampling procedures to inform the automated creation of a sample from a sample frame
Describe a sample to provide the information necessary to create sampling weights and estimation formulae.
Describe the processing of sampling for the purpose of informing the user of limitations or strengths of a particular sampling procedure and to provide guidance on the use of the procedure or the result of the procedure.

Target Audiences:
Organizations defining sample frames and sampling procedures for execution.
Users requiring information on the sampling process and its limitations.

Restricted Classes:
Parameter: valueRepresentation: ValueDomain: some subtypes not supported: SentinelValueDomain.

Precondition: basedOnPriorResult: Result: some subtypes not supported: SegmentDefintionResult, QualitativeCodingResult.

SamplingDesign: expressesAlgorithm: AlgorithmOverview: some subtypes not supported: SegmentDefinitionAlgorithm, QualitativeCodingAlgorithm, BusinessAlgorithm.

SamplingDesign: implementedBy: WorkflowProcess: all subtypes not supported.

SamplingProcedure: hasDesign: DesignOverview: some subtypes not supported: SegmentDefinitionDesign, QualitativeCodingDesign.

SamplingProcedure: isExpressedBy: AlgorithmOverview: some subtypes not supported: SegmentDefinitionAlgorithm, QualitativeCodingAlgorithm, BusinessAlgorithm.

SamplingProcedure: componentMethodology: MethodologyOverview: some subtypes not supported: SegmentDefinitionMethod, QualitativeCodingMethod.

Split: executeConcurrently: WorkflowStep: some subtypes not supported: Act, ConcurrentControlConstruct, SplitJoin.

SplitJoin: executeConcurrently: WorkflowStep: some subtypes not supported: Act, ConcurrentControlConstruct, Split.

Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
Concept is extended by ConceptualVariable, RepresentedVariable and InstanceVariable.
ExternalMaterial is extended by ExternalAid.
WorkflowStepSequence is extended by StructuredWorkflowSteps.

General documentation:
In socio-economic statistics, samples are used to conduct surveys within time, accuracy, and expense constraints. When it comes time to conduct a survey, the sample is selected from a larger set, called the frame or sampling frame. Frames are an enumeration of the population the survey is designed to estimate, but they don’t contain the variables a survey or experiment might collect. The sample is a subset of the frame, and it is designed (in theory) to be representative of the population as a whole. In practice, for any selected sample, this might not be the case.

Samples can be based on probability or not. For a probability based sample, each element in the frame is assigned a probability it is selected for a sample. Non-probability samples do not have this feature, and the elements are selected in some other manner. The representativeness of a probability based sample is measured as sampling error, a statistical measure. Every probability sample has a sampling error associated with it. It is an indicator of how accurate estimates are to the theoretical population values.

Several methods can be used to select a sample. In the simple case, elements are selected from the frame in one step. In the probability based case, typical techniques are simple random sampling (with or without replacement), systematic random sampling, sampling proportional to size, and simple stratified random sampling. For non-probability samples, techniques include convenience, purposive, quota, self-selected, and snowball sampling.

Sampling in scientific experiments is different than for statistical surveys usually. Non-probability sampling is often used. Self-selected samples (for instance people who volunteer for a drug trial) are often seen. 

To help reduce sampling errors, improve estimates, reduce costs, and reduce the time to complete a survey, sampling is sometimes broken into parts. The first main way this is done is through the use of strata. Strata are subsets of a population with independent estimates. For example, the mean height of women is different than the mean height of men. Sampling based on stratification reduces sampling error.

The other main way samples are partitioned is through clusters. Clusters are subsets based on some convenience criteria. For example, to make sure interviews can be conducted in a short amount of time for a country-wide survey, selected sample units might need to be geographically close, or clustered. This will greatly reduce the time and cost for collecting data, but it has the reverse effect of increasing the sampling error. Representativeness is affected if only some geographical areas are used to select the sample.

Sometimes, so many clusters are identified that they are sampled themselves. Then within those selected, the units for collection are selected. This is a 2-stage sample, and it should not be hard to imagine more than 2 steps to reduce clusters to a manageable size before the ultimate sampling units are selected. Some statistical surveys in the US have 4 stages or more.

It is possible that for some survey, more than one frame is needed. For instance, in random dialing telephone surveys, a bank of valid telephone numbers is the frame, and some are selected for contact. However, the bank of valid telephone numbers might come from the telephone company, and they are all land-lines. To get full coverage of the population, one must also select from a bank of cellphone numbers. Thus, 2 frames are needed, 2 samples are selected for full coverage (representativeness) to be achieved.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Access"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Access</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes access to the annotated object. This item includes a confidentiality statement, descriptions of the access permissions required, restrictions to access, citation requirements, depositor requirements, conditions for access, a disclaimer, any time limits for access restrictions, and contact information regarding access.

Examples
==========
A proprietary InstanceQuestion might have specific access restrictions.

DDI 3.2 mapping
=================
a:AccessType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AppliedUse"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AppliedUse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Links the guidance instructions to specific unit types.

Examples
==========
Links one or more guides for the use of a sample (result) obtained in the first stage of complex sample with the unit type. A sample of Counties from which households will be selected in the next sample stage.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Goal"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Goal</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Goals are the "things" a method aims to achieve. A goal may be a business function (GSIM) corresponding to a function in a catalog of functions such as GSBPM or GLBMN. However, goals may be specified more broadly. For example, conducting a clinical trial might be the goal of a method. Machine learning might be the goal of a method. 



Examples
==========
To further distinguish a "goal" from an "output", consider the construction of a statistic. A goal may be the construction of the statistic. The output is the statistic. The output is data. The statistic by itself -- the output -- is arguably meaningless even if we capture the process of its construction. 

GSIM mapping
==============
Business Function</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Guide"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Guide</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides a guide for the usage of a result within a specified application

Examples
==========
The applied use of a weight determined by a weighting process in analyzing a data set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Precondition"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Precondition</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A precondition is a state. The state includes one or more goals that were previously achieved. This state is the necessary condition before a process can begin.

Examples
==========
Using goals and preconditions processes can be chained to form work flows. Note that these work flows do not include data flows. Instead data flows consisting ouf outputs, inputs and bindings are a separate swim lane. 

Explanatory notes
===================
A precondition related to a design defines the state that must exist in order for a design being applied. For example in applying a Sampling Design there may be a precondition for the existance of a sampling frame meeting certain specifications.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SampleFrame"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SampleFrame</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of information used to identify a sample population within a larger population. The sample frame will contain identifying information for individual units within the frame as well as characteristics which will support analysis and the division of the frame population into sub-groups.

Examples
==========
A listing of all business enterprises by their primary office address with information on their industry classification, work staff size, and production costs. A telephone directory. An address list of housing units.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplePopulationResult"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplePopulationResult</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sample Population is the result of a sampling process. It is the subset of the population selected from the Sample Frame or Frames that will be used as respondents to represent the target population. Sample Populations may occur at a number of stages in the sampling process and serve as input to a subsequent sampling stage. The Sample Population should be validated against the intended sample population as described in the goal of the design and/or process.

Examples
==========
A list of phone numbers representing a random sample from a telephone book. The Counties selected from within a State from which Households will be selected using another sampling method.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingAlgorithm"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingAlgorithm</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Generic description of a sampling algorithm expressed by a Sampling Design and implemented by a Sampling Process. May include common algebraic formula or statistical package instructions (use of specific selection models).

Examples
==========
Random Sample; Stratified Random Sample</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingDesign"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingDesign</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Sampling plan defines the how the sample is to be obtained through the description of methodology or a model based approach, defining the intended target population, stratification or split procedures and recommended sample frames. The content of a sampling plan is intended to be reusable. The application of the sample plan is captured in Sampling Process.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingGoal"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingGoal</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides general description and specific targets for sample sizes including sub-populations.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcedure"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcedure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Sampling Procedure describes the population being sampled, the sampling frame and the sampling plan including steps and sub steps by referencing the universe, sample frames and sampling plans described in schemes. Target sample sizes for each stage can be noted as well as the process for determining sample size, the date of the sample and the person or organization responsible for drawing the sample.

Examples
==========
Census of Population and Housing, 1980 Summary Tape File 4, chapter on Technical Information. Overview is the Introduction generally describing the sample; there is a sample design section which provides a more detailed overview of the design. Additional external documentation provides detailed processes for sample adjustments needed for small area estimations, sample frames etc.

Explanatory notes
===================
This is a summary of the methodology of sampling providing both an overview of purpose and use of a particular sampling approach and optionally providing specific details regarding the algorithm, design, and process of selecting a sample.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SamplingProcess"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SamplingProcess</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the details of the process used to apply the sampling design and obtain the sample. Sampling Process contains a Workflow Step which provides the constituents of a Workflow. It can be a composition (a set of Control Constructs) or atomic (an Act) and may be performed by a service. This allows the use of existing Workflow models to express various sampling process actions. Sampling Frames and Sample Population can be used as designated Inputs or Outputs using Parameters.

Examples
==========
A Split which takes a sampling stage and divides the sample frame into different subsets. A different sampling technique is applied to each subset. Once a split occurs each subset can have stages underneath, and the number of states under each split subset may differ.
A Stage is the application of a single sampling algorithm applied to a sampling frame. For instance, the US Current Population Survey samples geographic areas first before identifying household to contact within each of those areas.
A Stratification of a stage into multiple subsets. Each stratified group will be sampled using the same sampling approach. For example stratifying a state by ZIP Code areas in each of 5 mean income quintiles and then doing a random sample of the households in a set of Zip Codes. Allows for oversampling of identified subpopulations.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Split"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Split</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The components of a Split consists of a number of process steps to be executed concurrently with partial synchronization. Split completes as soon as all of its component process steps have been scheduled for execution.

Explanatory notes
===================
Supports parallel processing that does not require completion to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SplitJoin"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SplitJoin</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
SplitJoin consists of process steps that are executed concurrently (execution with barrier synchronization). That is, SplitJoin completes when all of its components processes have completed. 

Examples
==========
A GANTT chart where a number of processes running parallel to each other are all prerequisites of a subsequent step.

Explanatory notes
===================
Supports parallel processing that requires completion of all included process steps to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowService"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowService</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means of performing a Workflow Step as part of a concrete implementation of a Business Function  (an ability that an organization possesses, typically expressed in general and high level terms and requiring a combination of organization, people, processes and technology to achieve).

Examples
==========
A specification for an air flow monitor used to capture a measure for an ImplementedMeasure (a subtype of Act).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:SamplingView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassificationView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Statistical Classification View brings together the structures need to record, organize, manage, and index Statistical Classifications. These classifications are often developed cooperatively and managed over time. They may be organized into series and families of classifications and use specified vocabularies. Mapping may be provided to express relationships between two or more Statistical Classifications in order to clarify change over time or the similarities and differences between Statistical Classifications in the same family (i.e. Industry, Occupation, Education).

Use Cases:
Industry: US-SIC, NAICS, GICS, ISIC; Occupational: ISCO, US-SOC; Geographic: US-FIPS, NUTS

Target Audience:
Organizations maintaining and managing shared Statistical Classifications.

Included Classes: 
AuthorizationSource, Category, ClassificationFamily, ClassificationIndex, ClassificationIndexEntry, ClassificationItem, ClassificationSeries, Code, Concept, ConceptParentChild, ConceptParentChildPair, ConceptPartWhole, ConceptPartWholePair, ConceptSystem, CorrespondenceTable, ExternalMaterial, Individual, Level, Map, Organization, StatisticalClassification, Vocabulary.

General Documentation:
The abstract class Designation serves as a relationship target for the following classes: ClassificationItem and Vocabulary. The only included class belonging to this abstract group is Code.
The abstract class Node serves as a relationship target for the following classes: Map and Level. The only included class belonging to this abstract group is ClassificationItem.
The abstract class NodeSet serves as a relationship target for the following class: CorrespondenceTable. The only included class belonging to this abstract group is StatisticalClassification.
The abstract class Agent serves as a relationship target for the following classes: CorrespondenceTable and AuthorizationSource. The only included classes belonging to this abstract group are Organization and Individual.
The abstract pattern class OrderedPair serves as a relationship target for the following class: Map. The only included class realizing this pattern is ConceptParentChildPair</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AuthorizationSource"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AuthorizationSource</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Identifies the authorizing agency and allows for the full text of the authorization (law, regulation, or other form of authorization).

Examples
==========
 May be used to list authorizations from oversight committees and other regulatory agencies.

Explanatory notes
===================
Supports requirements for some statistical offices to identify the agency or law authorizing the collection or management of data or metadata.

Synonyms
==========
Use for the Case Law, Case Law Description, and Case Law Date properties in ClassificationItem

DDI 3.2 mapping
=================
r:AuthorizationSourceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationFamily"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationFamily</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Family is a collection of Classification Series related from a particular point of view. The Classification Family is related by being based on a common Concept, as documented by the definingConcept relationship   (e.g. economic activity).[GSIM1.1]

Examples
==========
A family of industrial classifications each a separate series (i.e. U.S. Standard Industrial Classification (SIC) and North American Industrial Classification System (NAICS)

Explanatory notes
===================
Different classification databases may use different types of Classification Families and have different names for the families, as no standard has been agreed upon. [GSIM1.1]

GSIM mapping
==============
Classification Family</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationIndex"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationIndex</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Index is an ordered list (alphabetical, in code order etc) of Classification Index Entries. A Classification Index can relate to one particular or to several Statistical Classifications. [GSIM Statistical Classification Model]

Examples
==========
An alphabetical index of a topically ordered Statistical Classification

Explanatory notes
===================
A Classification Index shows the relationship between text found in statistical data sources (responses to survey questionnaires, administrative records) and one or more Statistical Classifications.  A Classification Index may be used to assign the codes for Classification Items to observations in statistical collections. 
A Statistical Classification is a subtype of a Structured Collection.  [GSIM Statistical Classification Model]  Note that a GSIM Node is the equivalent of a DDI Member and a GSIM Node Set is a DDI Collection.

GSIM mapping
==============
Classification Index</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationIndexEntry"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationIndexEntry</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Index Entry is a word or a short text (e.g. the name of a locality, an economic activity or an occupational title) describing a type of object/unit or object property to which a Classification Item applies, together with the code of the corresponding Classification Item. Each Classification Index Entry typically refers to one item of the Statistical Classification. Although a Classification Index Entry may be associated with a Classification Item at any Level of a Statistical Classification, Classification Index Entries are normally associated with items at the lowest Level.

GSIM mapping
==============
Classification Index Entry</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationItem"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationItem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Item represents a Category at a certain Level within a Statistical Classification.


Examples
==========
In the  2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

Explanatory notes
===================
A Classification Item defines the content and the borders of the Category. A Unit can be classified to one and only one item at each Level of a Statistical Classification. As such a Classification Item is a placeholder for a position in a StatisitcalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. 

This differentiates it from Code which is a kind of Designation, in particular it is an alphanumeric string assigned to stand in place of a category. For example, the letter M might stand for the category Male in the CodeList called Gender.

GSIM mapping
==============
Classification Item</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationItemRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationItemRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A complex RelationStructure for use with statistical classification

Examples
==========
A ClassificationRelationStructure for ISCO-08 would describe each of the major classifications as a parent of its sub-classifications.   1 Managers, for example would be listed as a parent of four sub groups: 11 Chief Executives, Senior Officials and Legislators;  12 Chief Executives, Senior Officials and Legislators;  13 Production and Specialized Services Managers; and  14 Hospitality, Retail and Other Services Managers. 

Explanatory notes
===================
The ClassificationItemRelationStructure has a set of ClassificationItemRelations which are basically adjacency lists. A source ClassificationItem has a described relationship to a target list of ClassificationItem. The semantic might be, for example, "parentOf", or "contains", etc..</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationSeries"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationSeries</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Classification Series is an ensemble of one or more Statistical Classifications, based on the same concept, as documented by the definingConcept relationship, and related to each other as versions or updates. Typically, these Statistical Classifications have the same name.

Examples
==========
ISIC or ISCO
SIC (with different published versions related to the publication year)

GSIM mapping
==============
Classification Series</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ClassificationSeriesRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ClassificationSeriesRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the complex relation structure of a classification family.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CorrespondenceTable"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CorrespondenceTable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Correspondence Table expresses relationships between the members within or between StatisticalClassifications.

Examples
==========
Correspondence between the U.S. Standard Industrial Classification (SIC) and North American Industrial Classification System (NAICS)

Explanatory notes
===================
CorrespondenceTables are used with Statistical Classifications. For instance, it can relate two versions from the same Classification Series; Statistical Classifications from different Classification Series; a variant and the version on which it is based; or, different versions of a variant. In the first and last examples, the Correspondence Table facilitates comparability over time.

GSIM mapping
==============
Correspondence Table</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IndexEntryRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IndexEntryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Structures relationship of Classification Index Entries in a Classification Index.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassification"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Statistical Classification is a set of Categories represented by Classification Items which may be assigned to one or more variables registered in statistical surveys or administrative files, and used in the production and dissemination of statistics. The Categories at each Level of the classification structure must be mutually exclusive and jointly exhaustive of all objects/units in the population of interest. (Source: GSIM StatisticalClassification)

Explanatory notes
===================
A Classification Item represents a Category at a certain Level within a Statistical Classification. The Categories are defined with reference to one or more characteristics of a particular universe of units of observation. A Statistical Classification may have a flat, linear structure or may be hierarchically structured, such that all Categories at lower Levels are sub-Categories of Categories at the next Level up. (Source: GSIM StatisticalClassification) 

GSIM mapping
==============
Statistical Classification</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StatisticalClassificationRelationStructure"/>
        <Class abbreviatedIRI="ddi:StatisticalClassificationView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StatisticalClassificationRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structure for describing the complex relationship between statistical classifications in a classification series

Examples
==========
A classification series that branches into separately versioned classifications

Explanatory notes
===================
Can use relation specification information to more fully describe the relationship between members such as parent/child, whole/part, general/specific, equivalence, etc.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:StructuredGeographyView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The purpose of Geographic Classification in DDI is to express relationships over time and space that are currently only available in geographic shape files or by exploring the data file itself. A great deal of legacy data does not have related geographic files. A large group of areas covered by DDI do not have clearly defined geography in terms of spatial extent, but have considerable relational information. Many geographic structures define geographic unit types with descriptive sub-sets (e.g. “Places of over 10,000 population” where the user must know whether a specific location meets that definition prior to determining if it is included in the data set).

Use Cases:
Describing geographic structures and their hierarchies
Describing geographic units and their corresponding locations (polygons, bounding boxes, points etc.)
Documenting changes to geographic units over time

Target Audiences:
Digital archivists
Search engines intent on exposing data by their geographical coverage
Researchers who need to describe complex geographical structures
Researchers who need to describe geographical structures and locations with changes over time

Restricted Classes:
ConceptSystem is extended by CategorySet
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population and Universe.
ExternalMaterial is extended by ExternalAid.

General Documentation:
Geographic classification uses unit, unit type, and collections to provide the basis for describing the geographic structure (unit types) and their individual locations (units) in a manner that supports complex layered hierarchies, changes in name, role, and geographic extent over time, and coding for direct use in value domains and responses. It supports the content of DDI Lifecycle Geographic Structure and Geographic Location.
The revision of the DDI 3.2 structure into the DDI4 structure addresses the following constraints in DDI 3.2:
·        Codes and names can be used directly wherever a code list can be used (both Geographic Unit Type Classification and Geographic Unit Classification are sub-types of Code List
·        A Geographic Unit (location) can belong to multiple Geographic Unit Type (geographic levels) with replicating its content
·        A Geographic Unit can version and/or define new units whenever there is a change in name or spatial extent as determined by the user. For example a Metropolitan Area may change only its spatial extent over time and be managed as versions of the same conceptual location; a city may annex additional land, or be renamed. Normally a new version of a Geographic Unit should have some common spatial extent with the old version. This can be described in the Geographic Unit precedes or supersedes using the Spatial Relationship using Spatial Relation Specification (Equals  Disjoint  Intersects  Contains  Touches).
·        Geographic Units can be used to describe points, lines, and/or polygons as well as include centroid information.


Equivalent Content between DDI 3.2 and DDI 4
DDI 3.2 - DDI 4 - Comment

Geographic Structure - Geographic Unit Type Classification - no comment

Geographic Level - Unit Type - Because no specialized information was being gathered a generic Unit Type is used. This allows users to declare any Unit Type as part of geography without requiring that it be of a specific type.

Parent Structure / Geographic Layer Base - Geographic Unit Type Relation Structure - Described as separate hierarchies; can have levels; Spatial relationships can be described

Geographic Level Code - Geographic Unit Type Instance - Codes are assigned when the Unit Type is used by a Geographic Unit Type Classification (see information on contains in Geographic Location)
Primary Component - Geographic Unit Type Relation Structure - Spatial relationships can be described

Geographic Location - Geographic Unit Classification - Inclusion of a Geographic Unit using “contains” allows for the assignment of a code in the same manner as in a code list. Different code sets should be expressed as different geographic unit classifications. Inclusion is by reference so that the described Geographic Unit can be assigned multiple codes without altering the Geographic Unit description

Location Value - Geographic Unit - Rather than grouping with other units of the same unit type, each unit can relate itself to one or more unit types. This allows for a location like Washington, D.C. to act as a State equivalent, County equivalent, and Place in the United States. Provides supersedes and precedes.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BoundingBox"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BoundingBox</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Spatial coverage describing a rectangular area within which the actual range of location fits. A BoundingBox is described by 4 numbers - the maxima of the north, south, east, and west coordinates found in the area.

Examples
==========
Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837

Explanatory notes
===================
A BoundingBox is often described by two x,y coordinates where the x coordinates are used for the North and South Latitudes and y coordinates for the West and East Longitudes

Synonyms
==========
r:BoundingBox</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicExtent"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicExtent</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the extent of a geographic unit for a specified period of time using Bounding Box, Inclusive and Exclusive Polygons, and an area coverage that notes a type of coverage (land, water, etc.) and measurement for the coverage. The same geographic extent may be used by multiple versions of a single geographic version or by different geographic units occupying the same spatial area.

Examples
==========
Bounding box for Burkino Faso: (N) 15.082773; (S) 9.395691; (E) 2.397927; (W) -5.520837.  Minnesota Land area: 206207.099 sq K, Water area: 18974.589 sq K 

Explanatory notes
===================
Clarifies the source of a change in terms of footprint of an area as opposed to a name or coding change. 

DDI 3.2 mapping
=================
r:GeographicBoundaryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnit"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific geographic unit of a defined Unit Type. A geographic unit may change its name, composition, or geographic extent over time. This may be tracked by versioning the content of the geographic unit. Normally a new version of a geographic unit would have a geographic (spatial) overlap with its previous version (a city annexing new area). A geographic unit ends when it is no longer a unit of the same unit type.

Examples
==========
The State of Minnesota from 1858 to date where the Unit Type is a State as defined by the United States Census Bureau. It has a geographic extent and supersedes a portion of the Territory of Minnesota and a portion of the Territory of Wisconsin. Minnesota territory had both a broader geographic extent, different Unit Type, and earlier time period (1849-1858) as did the Territory of Wisconsin. 

DDI 3.2 mapping
=================
r:GeographicLocationType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitClassification"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the classification of specific geographic units into a classification system. As a subtype of Code List it can be used directly for the description of a value domain.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Geographic Unit Types in a collection.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitTypeClassification"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitTypeClassification</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structured collection of Unit Types defining a geographic structure. As a subtype of CodeList it may be used directly to describe a value domain.

Examples
==========
Country--State--County</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:GeographicUnitTypeRelationStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:GeographicUnitTypeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Geographic Unit Types in a collection.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:StructuredGeographyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataManagementView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
DDI4 data management description aims to account for the ingestion and production of new data types (registry data, health data, big data, spell data, event data, etc.) and both legacy and new data management services that give shape to these data types in the course of the data lifecycle.  The Data Management View describes the prospective and retrospective use of multiple data management platforms and architectures including (1) ESB (Enterprise Service Bus) and SOA (Service Oriented Architecture); (2) the use of PROCs/Commands in statistical packages like SAS, Stata and R; and now (3) the use of iPaaS (integration Platform as a Service) in public clouds, private clouds and apparatuses as practiced by various ETL (Extract, Transform and Load) platforms.

Use Cases:
Create repeatable processes across a data network. More specifically, document and share the specifications for a demographic and epidemiological surveillance DataPipeline across surveillance sites
Produce a Data Management Plan (DMP) in the form of a DataPipeline so other researchers are able to replicate a study’s results
Document the actual data management in a study as a DataPipeline. This could underpin workflow tools for researchers
Use a DataPipeline description as the input to tools that trace the lineage of data during the data lifecycle of a Study 
Use a DataPipeline description and the GraphML it spawns to create workflow diagrams
Specialize the GLBPM to support the production of a dataset of geotagged tweets from the US where a wave corresponds to a day. Create a DataPipeline that describes in detail how this dataset is produced.
Programmatically create a Data Management View for an Extract, Transform and Load (ETL) platform using the ETL’s authoring environment and the instructions that authors create as input

Target Audiences:
Researchers who are preparing a Data Management Plan (DMP)
Data networks migrating from an Enterprise Service Bus (ESB) / Service Oriented Architecture (SOA) platform to a virtual (cloud-based) or actual integrated Platform as a Service (iPaaS) appliance (e.g. ETLs)
Industry-specific or generic standard groups who wish to integrate fully developed information models with domain-specific business process models
Search engines intent on exposing data lineage within a study

General Documentation:
At one level the Data Management View consists of a data pipeline that traverses a series of business activities from business process models like the GSBPM (Generic Statistical Business Process Model) for the production of statistics and the GLBPM (Generic Longitudinal Business Process Model) for the description of longitudinal studies. At another level the Data Management View decomposes these business processes into a series of workflow steps. At both levels components exchange data.

DataPipeline-
With the Data Management View, the user is able to construct a DataPipeline of BusinessProcesses where each BusinessProcess contains either a simple collection or a structured collection of WorkflowSteps. 
The DataPipeline itself is a simple collection of BusinessProcesses with the next one beginning after the preceding one ends.  
Use the Data Management View and its DataPipeline to traverse a business process model once to describe the data lifecycle of a Study and many times to describe the data lifecycle of a StudySeries.

BusinessProcess-
A BusinessProcess has an AlgorithmOverview, zero or more Preconditions, zero or more Postconditions and one or more StandardModelUsed. 
Note that Preconditions and Postconditions are LogicalRecords. One BusinessProcess creates/updates LogicalRecords as Postconditions. These Postconditions may become the Preconditions of the next BusinessProcess.

Figure 1: The DataPipeline

Note that support for business process models here is not limited to either the GSBPM or the GLBPM that the GSBPM has spawned.

The Generic Statistical Business Process Model (GSBPM) circumscribes a set of business processes that together describe a data lifecycle for building a single wave of national statistics. The Generic Longitudinal Business Process Model (GLBPM) specializes the GSBPM for longitudinal studies. Here each traversal of the GLBPM corresponds to the data lifecycle of a Study in a StudySeries.
Other business process models are more or less based on the GLBPM and the GSBPM. For example, a widely used demographic and epidemiological surveillance business process model specializes the GLBPM data lifecycle to create events, event histories and spells.

Figure 2: Support for Specialization of the GSBPM/GLBPM in DDI4 BusinessProcesses

WorkflowSteps-
The BusinessProcess decomposes into a WorkflowStepSequence.  Alternatively, the BusinessProcess AlgorithmOverview can be used to outline a WorkflowStepSequence. This would be appropriate in situations where only a higher-level description was needed.

Figure 3: Example AlgorithmOverview

The WorkflowStepSequence may be either a Simple Collection or a Structured Collection of WorkflowSteps. In a simple collection of WorkflowSteps, successive pairs in the sequence participate in a before/after relationship. In a structured collection, however, relationships among the WorkflowSteps can be complicated: a sequence may have multiple starting points and multiple end points. Here before and after relationships can be indeterminate, depending on a platform and its technology stack.
The structured collection of WorkflowSteps is called a WorkflowStepRelationStructure. Like other structured collections in DDI4, a WorkflowStepRelationStructure is specified in a graph form as an unordered list of adjacency lists where for each vertex we specify an array of adjacent vertices:

Figure 4: The DDI4 RelationStructure

Here each vertex and the array of its adjacencies are WorkflowSteps.

Figure 5: An Example WorkflowRelationStructure (fragment)

The Structured Collection in DDI4 is the successor to GSIM’s Node Set. Using graph representation, DDI4 RelationStructures, like the WorkflowStepRelationStructure, are easy to visualize and annotate using open source tools:

Figure 6: Graph Rendering of Example DDI4 WorkflowRelationStructure</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AlgorithmOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AlgorithmOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, algorithm statement used to describe the overall methodology. 

Explanatory notes
===================
This would most commonly be used in a Codebook along with a MethodologyOverview and a DesignOverview.The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessAlgorithm"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BusinessAlgorithm</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Business Algorithm is used to express the generalized function of the Business Process.
The underlying properties of the algorithm or method rather than the specifics of any particular implementation. In short a description of the method in its simplest and most general representation.

Examples
==========
There are several well-established algorithms for performing data anonymization including "local suppression", "global attribute generalization" and "k-Anonymization with suppression" which is a specific combination of the two. An anonymizing business process might implement one of these algorithms.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BusinessProcess"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BusinessProcess</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
BusinessProcesses could be Generic Longitudinal Business Process Model (GLBPM) and/or Generic Statistical Business Process Model (GSBPM) steps and/or sub-steps. BusinessProcesses participate in a DataPipeline by virtue of their preconditions and postconditions. 

A BusinessProcess differs from a WorkflowStep by virtue of its granularity. Higher level operations are the subject of BusinessProcesses. A BusinessProcess has a WorkflowStepSequence through which these higher levels operations may optionally be decomposed into WorkflowSteps.

BusinessProcess preconditions and postconditions differ from input and output parameters because they don't take variables and values. Instead the subject of preconditions and postconditions are typically whole datasets.

Given this level of granularity it is possible to view a BusinessProcess through the Open Archival Information System (OAIS) Reference Model. So a BusinessProcess may optionally be described as a component of a Submission Information Package (SIP), an Archival Information Package (AIP) or a Dissemination Information Package (DIP).

Examples
==========
In a single BusinessProcess we might receive data from a data source or merge data from different data sources or create new variables and recodes or format data for data dissemination

Explanatory notes
===================
One or more PairedExternalControlledVocabularyEntry objects may be used to identify and characterize controlled vocabularies like the GLBPM, GSBPM and OAIS. The PairedExternalControlledVocabularyEntry both identifies both the model (term) and the step/sub-step of the model (extent). If a BusinessProcess combines two steps from the same model (GLBPM, GSBPM, OAIS, etc.) or from different models, multiple PairedExternalControlledVocabularyEntry objects can be specified.

Synonyms
==========
Task</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Coverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Coverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Coverage information for an annotated object. Includes coverage information for temporal, topical, and spatial coverage. 

Examples
==========
A survey might have ask people about motels they stayed in (topical coverage) in the year 2015 (temporal coverage), while they were travelling in Kansas (spatial coverage). This is different than the temporal, and spatial attributes of the population studied – (international travelers to the US surveyed in 2017).

Explanatory notes
===================
Coverage is a container for the more specific temporal, spatial, and topical coverages to which it refers.

DDI 3.2 mapping
=================
r:CoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPipeline"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPipeline</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPipeline is a single traversal of the Generic Longitudinal Business Model (GLBPM) and/or the Generic Statistical Business process Model (GSBPM) in the course of a study where a study is either one off or a wave in a StudySeries.

Examples
==========
In a study where the study is a wave in a StudySeries, we do a single traversal of the Generic Longitudinal Business Process Model. From one wave to the next the traversal may be different. Each traversal is described in a DataPipeline.

Extract Transform and Load (ETL) platforms support data pipelines to move data between systems. Using an ETL platform, data engineers create data pipelines to orchestrate the movement, transformation, validation, and loading of data, from source to final destination. The DataPipeline describes this "orchestration".

A prospective DataPipeline gives guidance to data engineers. It is a design pattern. A retrospective DataPipeline documents an ETL data pipeline after the fact.


Synonyms
==========
Traversal, Data Lifecycle</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DesignOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DesignOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative, design statement The design may be used to specify how a process will be performed in general. This would most commonly be used in a Codebook along with an AlgorithmOverview and a MethodologyOverview. The design informs a specific or implemented process as to its general parameters. Supports specification of any realization of Goal. 


Explanatory notes
===================
Allows for the use of any realized Process. The methodology, design, and algorithm of a specific realized process should be used if available. The use of a generic Process such as a WorkflowProcess containing an Act would be appropriate here. Restriction would be done by inclusion of the appropriate realized process class(es) in a Functional View.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MetadataDrivenAction"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MetadataDrivenAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
MetadataDrivenActions are Acts in which their logic is defined by validation and transformation rules expressed in some standard rule language.

Examples
==========
Some data management systems present users with a menu of actions they can use in a sequence to perform a specific task. The system engages the user in a dialog driven by an action template. The dialog completes the template which the system then uses to perform the action. The user doesn't write any code.

Explanatory notes
===================
Whereas ComputationActions are used in statistical packages like SPSS, Stata, SAS and R to perform data management and data transformations, MetadataDrivenActions are used by data pipelines, e.g. ETL (Extract Transform Load) platforms, along with ComputationActions.

In a data pipeline the user is presented with a menu of MetadataDrivenActions that are captured here in an external controlled vocabulary. Users enter into a dialog with the platform through which they customize the MetadataDrivenAction. The user writes no code. The dialog is saved.

In the course of this dialog the user might specify a data source, specify which variables to keep or drop, rename variables, specify join specifics, create a value map between two variables and so forth.

MetadataDrivenActions represent this dialog in some standard rule language, e.g. Structured Data Transformation Language (SDTL) , Validation and Transformation Language (VTL), etc.. In fact,  MetaDataDrivenAction can use VTL with certain "extensions". Together they form quasi-VTL. quasi-VTL in turn conforms to a known schema. Using this schema users can render the quasi-VTL as XHTML and record it in the MetadataDrivenAction quasiVTL property. quasiVTL supports structured text.

Note that we would like NOT to create specific subtypes of MetadataDrivenAction -- one for each transformation. In fact there are a dozen or more such actions that will be captured in the MetadataDrivenAction types external controlled vocabulary. As an alternative, users can optionally write structured text based on a known schema. In this approach we are able to "evolve" SDTL as needed without changing our model. Instead, as our language "evolves", we one have to update its schema.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MethodologyOverview"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MethodologyOverview</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
High level, descriptive, human informative methodology statement used to describe the overall methodology, identify related design, algorithm, and process information. A methodology is normally informed by earlier research and clarifies how earlier research methods were incorporated into the current work. 



Examples
==========
The target of the relationship from Study: "hasMethodology"


Explanatory notes
===================
This would most commonly be used in a Codebook along with an AlgorithmOverview and a DesignOverview. Note that Process may be described in more detail than a high level overview.
Note that the algorithm may be implemented by multiple processes which are not limited to any specific type of Process. This can be constrained by the inclusion of only specific realizations of Process within a Functional View. Note that this MethodologyOverview can be used as a collective description of specific methodologies used by a Study or other broad set of metadata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SpatialCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SpatialCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of spatial coverage (geographic coverage) of the annotated object. Spatial coverage is described using a number of objects that support searching by a wide range of systems (geospatial coordinates, geographic classification systems, and general systems using dcterms:spatial).

Examples
==========
A country, a neighborhood, the inside of a polygon on the surface of the earth, along a street, at a particular intersection, or perhaps even in a certain orbit around the planet Mars. For a data set within a study this may be used to define the geographic restriction of the data set within the geographic coverage of the study (eg. The study may cover all of Sweden but the spatial coverage of the data set is Stockholm). 

Explanatory notes
===================
Different systems support different approaches to descriptions of geographic or spatial coverage. Dublin Core has a descriptive text field that is the equivalent of SpatialCoverage/description. Geographers need to understand the spatial objects available (spatialObject, highest and lowest level geography, geographic units and unit types) so they know the building blocks they have to create a map. Spatial search engines do a first pass search by a simple bounding box (the north and south latitudes and east and west longitudes that define the spatial coverage area). Spatial Coverage provides basic support for all of these uses.

Synonyms
==========
r:SpatialCoverage, place</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Split"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Split</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The components of a Split consists of a number of process steps to be executed concurrently with partial synchronization. Split completes as soon as all of its component process steps have been scheduled for execution.

Explanatory notes
===================
Supports parallel processing that does not require completion to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SplitJoin"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SplitJoin</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
SplitJoin consists of process steps that are executed concurrently (execution with barrier synchronization). That is, SplitJoin completes when all of its components processes have completed. 

Examples
==========
A GANTT chart where a number of processes running parallel to each other are all prerequisites of a subsequent step.

Explanatory notes
===================
Supports parallel processing that requires completion of all included process steps to exit.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Study"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Study</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Study is the conceptual anchor for an individual collection activity resulting in a data set or data file. It can be both a part of a StudySeries as a wave etc. or an unrelated activity like a single survey project.

Examples
==========
ICPSR study 35575 Americans and the Arts [1973 - 1992] (ICPSR 35575). https://www.icpsr.umich.edu/icpsrweb/ICPSR/studies/35575?dataFormat%5B0%5D=SAS&amp;keyword%5B0%5D=public+opinion&amp;geography%5B0%5D=United+States&amp;searchSource=revise  

Explanatory notes
===================
The Study class brings together many properties and relationships describing a set of data – coverage, kind of data, methodology, citation information, access information and more.

DDI 3.2 mapping
=================
s:StudyUnitType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TemporalCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TemporalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the temporal coverage of the annotated object by specifying dates and optionally associating them with Subject and Keyword. The date itself may be expressed as either and ISO and/or NonISO date. Dates may be catagorized by use of optional typeOfDate using and external controlled vocabulary entry.

Explanatory notes
===================
The association of subjects or keywords with the date periods allows for describing the meaning of the temporal period. A survey, for example might be administered in one time period, but ask questions about the preceding decade. Temporal coverage might then include the data collection coverage as well as the referenced time period.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TopicalCoverage"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TopicalCoverage</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Describes the topical coverage of the module using Subject and Keyword. Subjects are members of structured classification systems such as formal subject headings in libraries. Keywords may be structured (e.g. TheSoz thesauri) or unstructured and reflect the terminology found in the document and other related (broader or similar) terms.

DDI 3.2 mapping
=================
r:TopicalCoverageType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:DataManagementView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataDescriptionView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose
Use the DataDescriptionView to describe a collection of LogicalRecords by themselves or along with their PhysicalRecordSegments in a Study and/or a StudySeries.

Recall that a LogicalRecord is a record definition and a PhysicalRecordSegment describes the physical storage arrangement of a LogicalRecord.

Think of the collection of LogicalRecords and their PhysicalRecordSegment counterparts in a Study as a succession of states that are the products of one or more data transforming processes. In the DataDescriptionView we just describe products in this succession, not the processes through which these products are created.

In this succession operational data may be transformed into analysis-ready data and then analytical data in a series of steps. The DataDescriptionView captures the products from one, some or all of these interim steps. 

Products can include “skinny” and “fat” data structures; relational datastores; star schemas (data warehouses); structured collections of instance variables that take the form of objects, not tables; data cubes (not supported in the prototype) and so forth.

Instead of using the DataDescriptionView, use the DataManagementView for creating data descriptions that are both process-centered and product-centered. 


Use Cases
Construct a catalog of data records produced across the life of a study. Order the records by category: initial or submission records, interim or archival records, analysis or dissemination records
Expose variables in LogicalRecords and their PhysicalRecordSegments so they are searchable by: 
study, 
structural role(s) (identifier, measure and attribute) in one or more viewpoints and 
their functional role(s) as specified in one or more external controlled vocabularies
Specify the information needed for a Submission Information Package (SIP), an Archival Information Package (AIP) or a Dissemination Information Package (DIP) when the data is a CSV file
Support the description of a CSV file that uses a list datatype to, for example, report health measures that consist of compound elements like blood pressure
Support the description of medical information as specified both by Fast Healthcare Interoperability Resources (FHIR) and the Clinical Information Modeling openEHR Initiative (CIMI). With respect to FHIR, support, for example, the Observation and DiagnosticReport resources. With respect to CIMI, support, for example, the various observation archetypes including the newborn Apgar score, blood pressure, body mass index, physical examination findings, etc.
Support the description of a NoSQL key/value store where the key is either a simple collection of one or more identifiers or a structured (hierarchical) collection and the value can be text, video, sound or a JSON document

Target Audiences
Digital archivists
Search engines intent on exposing data lineage within a study
Researchers who are preparing a Data Management Plan (DMP)
Governments intent on exposing in a single datastore registries that include demographic data and health information in order to promote various types of research

Restricted Classes
Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
Concept is extended by ConceptualVariable, RepresentedVariable, UnitType and Universe.
ExternalMaterial is extended by ExternalAid.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AttributeRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AttributeRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An AttributeRole identifies one or more InstanceVariables as being attributes within a ViewPoint. An AttributeRole is a SimpleCollection of InstanceVariables acting in the AttributeRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no



Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint.
An InstanceVariable with an AttributeRole assigned might contain data about the conditions under which the MeausreRole InstanceVariables were collected or other paradata.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPoint"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataPoint is a container for a Datum.

Examples
==========
A cell in a spreadsheet table. Note that this could be empty. It exists independently of the value to be stored in it.

Explanatory notes
===================
The DataPoint is structural and distinct from the value (the Datum) that it holds. [GSIM 1.1]

GSIM mapping
==============
Data Point</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataPointRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataPointRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A means for describing the complex relational structure of Data Points in a Logical Record</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStore"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStore</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStore is either a SimpleCollection or a StructuredCollection of LogicalRecords, keeping in mind that a LogicalRecords is a definition, not a "datasets".

LogicalRecords organized in a StructuredCollection is called a LogicalRecordRelationStructure.

Instances of LogicalRecords instantiated as organizations of DataPoints hosting data are described in FormatDescription.

A DataStore is reusable across studies. Each Study has at most one DataStore.


Examples
==========
The data lineage of an individual BusinessProcess or an entire DataPipeline are both examples of  a LogicalRecordRelationStructures. In a data lineage we can observe how LogicalRecords are connected within a BusinessProcess or across BusinessProcesses.

Synonyms
==========
Schema repository, data network

GSIM mapping
==============
Data Set</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStoreLibrary"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStoreLibrary</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A DataStoreLibrary is a collection or, again, a "library" of DataStores.

An individual DataStore is associated with a Study. A collection of DataStores is associated with a StudySeries.

The relationships among the DataStores in the DataStoreLibrary is described by the DataStoreRelationStructure. Relations may be more or less complicated depending on the StudySeries type. A StudySeries may be ad hoc. A StudySeries may form a time series. The variety of these collections has been described using the &lt;a href=https://www.ddialliance.org/Specification/DDI-Lifecycle/3.1/XMLSchema/FieldLevelDocumentation/"&gt;"Group"&lt;/a&gt; in DDI 3.1.

Like any RelationStructure, the DataStoreRelationStructure is able to describe both part/whole relations and generalization/specialization relations. See the controlled vocabulary at &lt;a href="http://lion.ddialliance.org/datatypes/relationspecification"&gt;RelationSpecification&lt;/a&gt; to review all the types of relations a RelationStructure is able to describe. 

Examples
==========
A StudySeries is a time series and a DataStoreRelationStructure is dedicated to tracking "supplements".

There is a study at T0. Perhaps it is never executed. It is the "core" study. At T1 there is a study that includes the core and Supplement A. At T2 there is a study that includes the core, Supplement A and Supplement B. At T3 there is a study that includes the core and a one off supplement that is never asked again. T4 though T6 repeats T1 through T3.



Explanatory notes
===================
If we broke a study down into sub-studies where the core is a sub-study and each supplement is a sub-study, we could also use the DataStoreRelationStructure to track the generalization/specialization relationship or, again, "going deep" over time.

Sometimes across a StudySeries we add panels. If panels were also sub-studies, we could use the DataStoreRelationStructure to track both the core and supplements by panel over time.

Synonyms
==========
Structured metadata archive</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataStoreRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataStoreRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A structure for describing a complex relation of DataStores within a DataStoreLibrary

Examples
==========
If the succession of DataStores are created by a StudySeries that is a time series, from one DataStore to the next part/whole relations can obtain as supplements are added and subtracted.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Datum"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Datum</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Datum is a designation (a representation of a concept by a sign) with a notion of equality defined. The sign itself is a perceivable object.

Examples
==========
A systolic blood pressure of 122 is measured. The Signifier for that measurement in this paragraph is the character string "122". The Datum in this case is a kind of Designation (Sign), which is the association of the underlying measured concept (a blood pressure at that level) with that Signifier.  The Datum has an association with an InstanceVariable which allows the attachment of a unit of measurement (mm Hg), a datatype, a Population, and the Act which produced the measurement.  These InstanceVariable attributes are critical for interpreting the Signifier.

Explanatory notes
===================
From GSIM 1.1 "A Datum is the actual instance of data that was collected or derived. It is the value which populates one or more Data Points. A Datum is the value found in a cell of a table." (https://statswiki.unece.org/display/GSIMclick/Datum )  A Datum could be copied to one or more datasets.
DDI4 takes a little more formal (semiotic) description of a Datum using the Signification Pattern. See the attached example.


NOTE: This is NOT datum from DDI3.2 (which is quite specific).

GSIM mapping
==============
Datum</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IdentifierRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IdentifierRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An IdentifierRole identifies one or more InstanceVariables as being identifiers within a ViewPoint. An IdentifierRole is a SimpleCollection of InstanceVariables acting in the IdentifierRole.


Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the order of InstanceVariables in a record for those cases where the variables have a more complicated logical order than a simple sequence.


Explanatory notes
===================
For a simple sequence the order can be defined by the index values of the LogicalRecord's InstanceVariableIndicators that a UnitDataRecord inherits. Alternatively, the InstanceVariableRelationStructure can be used by a UnitDataRecord to describe a StructuredCollection as needed. 


Synonyms
==========
An information model, a struct in C, a nested object in JSON</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LogicalRecordRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LogicalRecordRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Allows for the complex structuring of relationships between LogicalRecords in a DataStore

Examples
==========
A DataStore with a Household, Family, and Person LogicalRecord type. Allows for describing parent/child, whole/part, or other relationships as appropriate</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:MeasureRole"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:MeasureRole</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A MeasureRole identifies one or more InstanceVariables as being measures within a ViewPoint. A MeasureRole is a SimpleCollection of InstanceVariables acting in the MeasureRole.



Examples
==========
A data record with four variables: "PersonId", "Systolic", "Diastolic", "Seated" might have a Viewpoint with 
PersonId defined as having the IdentifierRole
Systolic defined as having the MeasureRole
Diastolic defined as having the MeasureRole
Seated defined as having the AttributeRole

PersonId, Systolic, Diastolic, Seated
123,122,20,yes
145,130,90,no


Explanatory notes
===================
See the Viewpoint documentation for an in depth discussion of the uses of ViewpointRoles: http://lion.ddialliance.org/ddiobjects/viewpoint</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalDataSet"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalDataSet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The information needed for understanding the physical structure of data coming from a file or other source. A StructureDescription also points to the Data Store it physically represents.

Examples
==========
The PhysicalDataProduct is the entry point for information about a file or other source. It includes information about the name of a file, the structure of segments in a file and the layout of segments.

Explanatory notes
===================
Multiple styles of structural description are supported: including describing files as unit-record (UnitSegmentLayout) files; describing cubes; and describing event-history (spell) data.

DDI 3.2 mapping
=================
p:PhysicalDataProductType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalLayoutRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalLayoutRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A realization of RelationStructure that is used to describe the sequence of Value Mappings in a Physical Layout. This can be more complex than a simple sequence. 

Examples
==========
The W3C Tabular Data on the Web specification allows for a list datatype. In the example below there are three top level InstanceVariables
PersonID – the person identifier
AgeYr – age in year
BpSys_Dia – blood pressure (a list containing Systolic and Diastolic values)

There are two variables at a secondary level of the hierarchy
Systolic – the systolic pressure
Diastolic – the diastolic pressure

The delimited file below uses the comma to separate "columns" and forward slash to separate elements of a blood pressure list.

PersonID, AgeYr, BpSys_Dia
1,22,119/67
2,68,122/70

The PhysicalRelationStructure in this case would describe a BpSys_Dia  list variable as containing an ordered sequence of the Systolic and Diastolic InstanceVariables.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalOrderRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalOrderRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
PhysicalStructureOrder orders thePhysicalRecordSegments  which map to a LogicalRecord.

Explanatory notes
===================
The same LogicalRecordLayout may be the sourceMember in several adjacency lists. This can happen when PhysicalRecordSegments are also population specific. In this instance each adjacency list associated with a LogicalRecordLayout is associated with a different population.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:PhysicalRecordSegment"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:PhysicalRecordSegment</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A description of each physical storage segment required to completely cover the logical record. A logical record may be stored in one or more segments housed hierarchically in a single file or in separate data files. All logical records have at least one segment.

Examples
==========
The file below has four InstanceVariables: PersonId, SegmentId, AgeYr, HeightCm. The data for each person (identified by PersonId) is recorded in two segments (identified by SegmentId), "a" and "b". AgeYr is on physical segment a, and HeightCm is on segment b. These are the same data as described in the UnitSegmentLayout documentation.
1 a  22
1 b 183
2 a 45
2 b 175


DDI 3.2 mapping
=================
p:PhysicalRecordSegmentType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RecordRelation"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RecordRelation</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The RecordRelation object is used to indicate relationships among record types within and between LogicalRecords. For InstanceVariables existing in a LogicalRecord with multiple record layouts, pairs of InstanceVariables may function as paired keys to permit the expression of hierarchical links between records of different types. These links between keys in different record types could also be used to link records in a relational structure.

Examples
==========
One LogicalRecord containing a PersonIdentifier and a PersonName and another LogicalRecord containing a MeasurementID, a PersonID, a SystolicPressure, and a DiastolicPressure could be linked by a RecordRelation. The RecordRelation could employ an InstanceVariableValueMap to describe the linkage between  PersonIdentifier and PersonID.

Explanatory notes
===================
A household-level LogicalRecord might contain an InstanceVariable called HouseholdID and a person-level LogicalRecord might contain an InstanceVariable called HID. Describing a link between HouseholdID and HID would allow the linking of a person-level LogicalRecord to their corresponding household-level LogicalRecord.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SegmentByText"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SegmentByText</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the location of a segment of text through character, and optionally line, counts. An adequate description will always include a startCharacterPosition and then may include an endCharacterPosition or a characterLength.
If StartLine is specified, the character counts begin within that line.
An endCharacterPosition of 0 indicates that whole lines are specified


Examples
==========
The segment beginning at line 3, character 4 and ending at line 27 character 13.
Alternatively the segment beginning at character 257 and ending at character 1350 of the whole body of text.
StartLine of 10, endLine of 12, startCharacterPosition of 1, endCharacterPosition of 0 means all of lines 10,11, and 12.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataRecord"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataRecord</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Gives a UnitDataRecord structure to a Logical Record. UnitDataRecord structures a LogicalRecord as either a SimpleCollection or a StructuredCollection (InstanceVariableRelationStructure) of instance variables.

The UnitDataRecord also organizes instance variables in a UnitDataViewpoint. The UnitDataViewpoint assigns roles to Instance Variables. In any one UnitDataViewpoint UnitDataRecord instance variables play one of three roles: identifier, measure or attribute. The same UnitDataRecord may have many UnitDataViewpoints.

The UnitDataViewPoint can work in conjunction with the InstanceVariableRelationStructure. Together they can break out instance variables into complex (hierarchical) identifier, measure and attribute groups. 

Examples
==========
The UnitDataRecord can be used to specify the structure of a table in a relational database. It can be used to specify the structure of both the fact and dimension tables in a data warehouse. It can be used to specify the structure of a big data table. Likewise it can be used to specify the structures of "column-based" and "row-based" tables.

The UnitDataRecord may also form an information model if it is a StructuredCollection. Blood Pressure as described by an openEHR archetype is an information model. So is a collection of FHIR (HL7) resources that form an Electronic Health Record (EHR). 

Explanatory notes
===================
The &lt;a href="http://www.openehr.org/ckm/"&gt;openEHR archetype&lt;/a&gt; is a use case that motivates the use of the InstanceVariableRelationStructure together with a UnitDataViewPoint. In the Blood Pressure archetype as well as most other archetypes attributes are not a SimpleCollection. Instead they are part of a StructuredCollection that breaks out attributes into "Protocol", "State" and "Events". In other archetypes the measure may be structured. For example body composition data includes a "base model" (fat mass, fat percentage, fat free mass), an "atomic level" (chemical elements, hydrogen, carbon, oxygen), a "molecular level" (minerals, protein, fat, water) and so forth.

It is, however, possible to break out attributes into not one but many SimpleCollections in the event attributes and/or data do not form StructuredCollections. That is because the UnitDataViewpoint supports not just one but many attribute roles within the same viewpoint.

Synonyms
==========
Table Definition if the UnitDataRecord is a SimpleCollection, Information Model if the UnitDataRecord is a StructuredCollection</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitDataViewpoint"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitDataViewpoint</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The assignment of measure, identifier and attribute roles to InstanceVariables

Each of three roles within a UnitDataViewpoint is a SimpleCollection of instance variables. 

Examples
==========
Assigning 
PatientID the role of identifier
systolic the role of measure
diastolic the role of measure
device the role of attribute
time the role of attribute
position (sitting, standing) the role of attribute

Explanatory notes
===================
Viewpoint is a UnitDataViewpoint to underline that the composition of a UnitDataRecord viewpoint is different from the composition of DataCube viewpoint. The DataCube viewpoint is out of scope currently. 
It is sometimes useful to describe a set of variables and their roles within the set. In the blood pressure example above, values for a set of variables are captured in one setting - the taking of a blood pressure. Some of the variables may be the measures of interest, for example the systolic and diastolic pressure. Other variables may take on the role of identifiers, such as the hospital’s patient ID and a government ID such as the U.S. Social Security Number. A third subgroup of variables may serve as attributes. The age of the patient, whether she is sitting or standing, the time of day. The assignment of these three roles, identifier, measure, and attribute, is the function of the Viewpoint.
Viewpoints are not fixed attributes of variables. This is why there is a separate Viewpoint class which maps to InstanceVariables.   In the example above, the Viewpoint is within the context of the original measurement. In a reanalysis of the data the roles might change. Time of day might be the measure of interest in a study of hospital practices.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitSegmentLayout"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitSegmentLayout</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
UnitSegmentLayout supports the description of unit-record ("wide") data sets, where each row in the data set provides the same group of values for variables all relating to a single unit. Each logical column will contain data relating to the values for a single variable. 

Examples
==========
A simple spreadsheet. Commonly the first row of the table will contain variable names or descriptions.

The following csv file has a rectangular layout and would import into a simple table in a spreadsheet:
PersonId,AgeYr,HeightCm
1,22,183
2,45,175


Explanatory notes
===================
This is the classic rectangular data table used by most statistical packages, with rows/cases/observations and columns/variables/measurements. Each cell (DataPoint) in the table is the intersection of a Unit (row) and an InstanceVariable.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueMapping"/>
        <Class abbreviatedIRI="ddi:DataDescriptionView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueMapping</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides physical characteristics for an InstanceVariable as part of a PhysicalSegmentLayout

Examples
==========
A variable "age" might be represented in a file as a string with a maximum length of 5 characters and a number pattern of ##0.0

Explanatory notes
===================
An InstanceVariable has details of value domain and datatype, but will not have the final details of how a value is physically represented in a data file. A variable for height, for example, may be represented as a real number, but may be represented as a string in multiple ways. The decimal separator might be, for example a period or a comma. The string representing the value of a payment might be preceded by a currency symbol. The same numeric value might be written as “1,234,567” or “1.234567 E6”. A missing value might be written as “.”, “NA”, “.R” or as “R”. 
The ValueMapping describes how the value of an InstanceVariable is physically expressed. The properties of the ValueMapping as intended to be compatible with the W3C Metadata Vocabulary for Tabular Data (https://www.w3.org/TR/tabular-metadata/ ) as well as common programming languages and statistical packages. The “format” property, for example can draw from an external controlled vocabulary such as the set of formats for Stata, SPSS, or SAS.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualContentView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
To review the conceptual concept structures and to manage concept systems (other than statistical classifications). The coverage go down to a RepresentedVariable. InstanceVariable has been included in the collection for use as a member of a VariableCollection. However it does not go into the detailed content of an InstanceVariable.

Restriction: 
InstanceVariable has been included for the sole purpose of membership in a VariableCollection. The classes required to completely describe an InstanceVariable have not been included.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystemCorrespondence"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystemCorrespondence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relationship between 2 or more ConceptSystems described through mapping similarity relationships between their member Concepts.

Examples
==========
Correspondence between the concepts used to define the populations in the censuses of two countries with similarity mapping of Concepts "Resident Population", "Labor Force", "Housing Unit", etc. 

Explanatory notes
===================
Describes correspondence with one or more Maps which identify a source and target concept and defines their commonality and difference using descriptive text and controlled vocabularies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualVariable"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Concept as a characteristic of a UnitType intended to be measured

Examples
==========
1. Sex of person
2. Number of employees 
3. Value of endowment

Explanatory notes
===================
Note that DDI varies from GSIM in the use of a UnitType rather than a Universe. "The use of a Concept as a characteristic of a Universe intended to be measured" [GSIM 1.1]

DDI 3.2 mapping
=================
c:ConceptualVariableType

GSIM mapping
==============
Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Population"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Population</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of specific units (people, entities, objects, events) with specification of time and geography.

Examples
==========
1. Canadian adult persons residing in Canada on 13 November 1956
2. US computer companies at the end of 2012  
3. Universities in Denmark 1 January 2011.

Explanatory notes
===================
Population is the most specific in the conceptually narrowing hierarchy of UnitType, Universe and Population. Several Populations having differing time and or geography may specialize the same Universe.

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Unit"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Unit</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The object of interest in a process step related to the collection or use of observational data.

Examples
==========
Here are 3 examples - 1. Individual US person (i.e., Arofan Gregory, Dan Gillman, Barack Obama, etc.) 2. Individual US computer companies (i.e., Microsoft, Apple, IBM, etc.) 3. Individual US universities (i.e., Johns Hopkins, University of Maryland, Yale, etc.) [GSIM 1.1]

Explanatory notes
===================
In a traditional data table each column might represent some variable (measurement). Each row would represent the entity (Unit)  to which those variables relate. Height measurements might be made on persons (UnitType) of primary school age (Universe) at Pinckney Elementary School on September 1, 2005 (Population). The height for Mary Roe (Unit)  might be 139 cm.
The Unit is not invariably tied to some value. A median income might be calculated for a block in the U.S. but then used as an attribute of a person residing on that block. For the initial measurement the Unit was the block. In the reuse the unit would be that specific person to which the value was applied.
In a big data table each row represents a unit/variable double. Together a unit identifier and a variable identifier define the key. And for each key there is just one value – the measure of the unit  on the variable. 
A big data table is sometimes referred to as a column-oriented data store whereas a traditional database is sometimes referred to as a row-oriented data store. The unit plays an identifier role in both types of data stores.


GSIM mapping
==============
Unit</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableCollection"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableCollection</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A collection (group) of any type of Variable within the Variable Cascade (Conceptual, Represented, Instance) for purposes of management, conceptualization or anything other than organizing a logical record or physical layout.

Examples
==========
Variables within a specific section of a study, Variables related to a specific subject or keyword. Variables at a specified level of development or review.

Explanatory notes
===================
A simple ordered or unordered list of variables can be described via a set of VariableIndicator parameters. An optional VariableRelationStructure can describe a more complex structure for the collection. We might, for example, use the VariableRelationStructure to group variables by content within a Study or across a StudySeries.

DDI 3.2 mapping
=================
l:VariableGroupType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VariableRelationStructure"/>
        <Class abbreviatedIRI="ddi:ConceptualContentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VariableRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
RelationStructure for use with any mixture of Variables in the Variable Cascade (Conceptual, Represented, Instance).

Explanatory notes
===================
A VariableCollection can be described as a simple list, or as having a more complex structure. All of the "administrative" variables for a study might be described as just a simple list without a VariableRelationStructure. If, however, the administrative variables needed to be described in subgroups, a VariableRelationStructure could be employed.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ControlledVocabularyView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The ControlledVocabulary view is intended to allow for the structured description of a vocabulary in DDI4. A vocabulary can be described as a simple set of terms and definitions, or a set of terms and definitions with a structure such as a hierarchy.

Use Cases:
A DDI4 ExternalControlledVocabularyEntry could reference a vocabulary entry described in DDI4. This would allow processing by software able to interpret DDI4. 
DDI4 has a set of controlled vocabularies https://www.ddialliance.org/controlled-vocabularies, currently described in Genericode. These could be published in DDI4 as well.
Vocabularies having a structure more complex than a simple table.

Target Audiences:
DDI4 user communities.

Restricted Classes:
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population, UnitType and Universe
ExternalMaterial is extended by ExternalAid

General Documentation:
The representation of a controlled vocabulary in DDI4 consists of four classes:
ControlledVocabulary – The structured collection of vocabulary entries
VocabularyEntry – Assigns a definition to a term
VocabularyRelationStructure – Allows for the description of a complex structure among the terms, such as a hierarchy
ExternalMaterial – Points to material outside of a current DDI4 instance.

The ControlledVocabulary uses a set of  VocabularyEntryIndicators to delineate the entries in the vocabulary. These may be ordered with an index.
The VocabularyRelationStructure uses a set of VocabularyEntryRelations to describe relationships among the vocabulary entries. A "source" entry might have a relationship to several "target" entries, for example one entry (e.g. Vehicle) might be a more general term for several other terms (e.g. car, bike, skateboard). This relationship may be described with a semantic, a relationSpecification (e.g. GeneralSpecific), and whether the relation is total or not. 
The diagram below shows all inherited properties for the vocabulary classes.
[image to be inserted here]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ControlledVocabulary"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ControlledVocabulary</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The specification of a controlled vocabulary defines a set of values and their definitions together with the order relationships among those entries.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VocabularyEntry"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VocabularyEntry</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
One entry term and its definition in an ordered list comprising a controlled vocabulary.

Examples
==========
aunt - The female sibling of a parent</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:VocabularyRelationStructure"/>
        <Class abbreviatedIRI="ddi:ControlledVocabularyView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:VocabularyRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains the Vocabulary Relations used to structure the ControlledVocabulary</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomMetadataView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The DDI4 CustomMetadataView allows for the definition of a set of keys and their interrelationships. This structure can be shared and reused by a community. These keys can be used in key-value pairs to enter metadata that is more actionable than would be if an uncontrolled set of keys were employed. They could also be used in a NoSQL key/value store.

Use Cases:
User defined structures for notes. This corresponds to the UserAttributePair in DDI3.2, but allows for additional specification of a structure for the keys and a datatype and cardinalities for the values.
User defined structures for specifying the location of parts of qualitative objects. The example below shows the location of words or sentences from material arranged into volume, chapter, sentence and word
User defined structures for specifying the location of  parts of cited materials

Target Audiences:
Users of DDI4 needing structured extensions to be shared by their community. A user community, for example, could share the structure for locating material by volume, chapter, sentence and word.

Restricted Classes:
The list below displays each class in the View that is extended by classes not in the view.
Concept is extended by ConceptualVariable and Population.
ExternalMaterial is extended by ExternalAid.
Code is extended by ClassificationItem.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.

General Documentation:
The keys and their interrelationships are defined in a CustomStructure which is a collection of CustomItems. Each CustomItem defines a key, giving it a cardinality and associating it with a RepresentedVariable and a ValueDomain. The set of CustomItems can be arranged into a structure, for example a hierarchy, by a CustomItemRelationStructure.
[image to be inserted]
Once the structure is defined, it can be used in a CustomInstance. This is a collection of CustomValues. A CustomValue contains a key-value pair where the key corresponds to a previously defined CustomItem. A CustomValue also may be associated with an InstanceVariable.  The CustomValues may also be structured by a CustomValueRelationStructure.
[image to be inserted]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomInstance"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomInstance</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of CustomValues to be attached to some object.

Examples
==========
A set of OMB required information about a question.

The set of openEHR protocol information to be attached to a blood pressure Capture</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomItem"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomItem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A custom item description. This allows the definition of an item which is a member of a CustomStructure.
It defines the minimum and maximum number of occurrences and representation of a CustomValue.

Examples
==========
DegreeOfBurden for a question as required by the U.S. OMB.

BloodPressureCuffSize - the size of a blood pressure cuff specified for a particular protocol.

Explanatory notes
===================
This definition will be referenced by a CustomValue when recording a key,value instance</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomItemRelationStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomItemRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Contains a set of CustomItemRelations which together define the relationships of Custom Structure.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Collection containing a set of item descriptions defining a structure for a set of key,value pairs

Examples
==========
The set of CustomItems which are to be used to document the OMB required information for a question.

The set of CustomItems used to describe an openEHR blood pressure protocol.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CustomValue"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CustomValue</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance of a  key, value pair for a  particular  key.

Examples
==========
OMBBurden,"High"

openEHRBPposition, "upper arm"</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceVariable"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Represented Variable within a Data Set.  The InstanceVariable describes actual instances of data that have been collected. 

Examples
==========
1) Gender: Dan Gillman has gender &lt;m, male&gt;, Arofan Gregory has gender&lt;m, male&gt;, etc. 
2) Number of employees: Microsoft has 90,000 employees; IBM has 433,000 employees, etc. 
3) Endowment: Johns Hopkins has endowment of &lt;3, $1,000,000 and above&gt;, 
Yale has endowment of &lt;3, $1,000,000 and above&gt;, etc.

Two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable.

Explanatory notes
===================
The InstanceVariable class inherits all of the properties and relationships of the RepresentedVariable (RV) class and, in turn, the ConceptualVariable (CV) class. This means that an InstanceVariable can be completely populated without the need to create an associated RepresentedVariable or ConceptualVariable. If, however, a user wishes to indicate that a particular InstanceVariable is patterned after a particular RepresentedVariable or a particular ConceptualVariable that may be indicated by including a relationship to the RV and or CV. Including these references is an important method of indicating that multiple InstanceVariables have the same representation, measure the same concept, and are drawn from the same Universe. If two InstanceVariables of a person's height reference the same RepresentedVariable. This indicates that they are intended to: be measured with the same unit of measurement, have the same intended data type, have the same SubstantativeValueDomain, use a SentinelValueDomain drawn from the same set of SentinelValueDomains, have the same sentinel (missing value) concepts, and draw their Population from the same Universe. In other words, the two InstanceVariables should be comparable. 


GSIM mapping
==============
Instance Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelConceptualDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Description or list of possible sentinel concepts , e.g. missing values.

Examples
==========
Refused, 
Don't know, 
Lost in processing

Synonyms
==========
missing categories</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveConceptualDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveConceptualDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Set of valid Concepts. The Concepts can be described by either enumeration or by an expression.

Examples
==========
An enumeration of concepts for a categorical variable like "male" and "female" for gender.

Explanatory notes
===================
A ConceptualVariable links a UnitType to a SubstantiveConceptualDomain. The latter can be an enumeration or description of the values (Signified) that the variable may take on. In the enumerated case these are the categories in a CategorySet that can be values, not the codes that represent the values. 
An example might be the conceptual domain for a variable representing self-identified gender. An enumeration might include the concept of “male” and the concept of “female”. These, in turn, would be represented in a SubstantiveValueDomain by codes in a CodeList like “m” and “f”, or “0” and “1”. 
A conceptual domain might be described through a ValueAndConceptDescription’s description property of “a real number greater than 0” or through a more formal logicalExpression of “(all reals x such that x &gt;0) “. Even in the described case, what is being described are conceptual, not the symbols used to represent the values. This may be a subtle distinction, but allows specifying that the same numeric value might be represented by 32 bits or by 64 bits or by an Arabic numeral or a Roman numeral.


GSIM mapping
==============
Conceptual Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ValueAndConceptDescription"/>
        <Class abbreviatedIRI="ddi:CustomMetadataView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ValueAndConceptDescription</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A formal description of a set of values. 

Examples
==========
Example 1) 
The integers between 1 and 10 inclusive.  
The values of x satisfying the logicalExpression property:
" (1 &lt;=x &lt;= 10) AND mod(x,10)=0"
Also described with minimumValueInclusive = 1 and maximumValueInclusive = 10 (and datatype of integer)

Example 2)
The upper case letters A through C and X
described with the regularExpression "/[A-CX]/"


Example 3)
A date-time described with the Unicode Locale Data Markup Language pattern yyyy.MM.dd G 'at' HH:mm:ss zzz


Explanatory notes
===================
The ValueAndConceptDescription may be used to describe either a value domain or a conceptual domain. For a value domain, the ValueAndConceptDescription contains the details for a “described” domain (as opposed to an enumerated domain). There are a number of properties which can be used for the description. The description could be just text such as: “an even number greater than zero”. Or a more formal logical expression like “x&gt;0 and mod(x,2)=0”. A regular expression might be useful for describing a textual domain. It could also employ a format pattern from the Unicode Locale Data Markup Language (LDML) (http://www.unicode.org/reports/tr35/tr35.html.
Some Conceptual Domains might be described with just a narrative. Others, though, might be described in much the same way as a value domain depending on the specificity of the concept.

In ISO 11404 a value domain may be described either through enumeration or description, or both. This class provides the facility for that description. It may be just a text description, but a description through a logical expression is machine actionable and might, for example, be rendered as an integrity constraint. If both text and a logical expression are provided the logical expression is to be taken as the canonical description.
The logical expression should conform to the expression syntax of VTL. https://sdmx.org/?page_id=5096</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:DataCaptureInstrumentView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The purpose of the DDI4 Data Capture Instrument View is to describe the processes of developing- and collect data from a questionnaire instrument, as well as to describe the capture or acquiring of measurements from various sources, like databases, registries, administrative data, bio-medical devices, environmental sensors, or any other source or instrument. The focus on measurement is new in DDI4 compared to earlier versions of the standard.

Use Cases:
Document  the development process for a conceptual questionnaire of an international survey
Design an implemented questionnaire in a specific mode and for a specific population
View how a measurement has been captured or how a survey question has been asked
Reuse of instrument components developed for a different study
Export instrument related metadata between applications
Design a measurement
Describe a measurement  instrument 

Target Audiences:
Developers of conceptual instruments, for example for an international survey
Designers of implemented instruments for surveys and measurements
Designers and developers of data capture tools
Researchers wishing to understand how a measurement has been captured or how a survey question was asked or how it was developed
DDI4 users in general

Restricted Classes:
WorkflowStepSequence is extended by StructuredWorkflowSteps.
RepresentedVariable is extended by InstanceVariable.
CodeList is extended by GeographicUnitClassification, GeographicUnitTypeClassification and StatisticalClassification.
ConceptualVariable is extended by InstanceVariable
Concept is extended by InstanceVariable, Population and UnitType;
ExternalMaterial is extended by ExternalAid.
Code is extended by ClassificationItem.

General Documentation:
Questionnaire development – a brief overview

The goal of questionnaire design is to develop an ImplementedInstrument from which data can be captured when put in field. 

The first step in a questionnaire design process is often to select or define the topics and the Concepts to be measured by the questions in the instrument. 
The concepts are then operationalized into RepresentedQuestions that contains the more reusable components of a question that can be reused among different surveys, studies and modes of collection.
InstanceQuestions realize the represented questions in an instrument. It connects to other InstrumentComponents like for example a showcard or other ExternalAid and Instructions, and links the question to the flow logic of the questionnaire. 
The ConceptualInstrument represents the instrument independent of mode. It organizes the instrument by connecting the instrument components to WorkflowStepSequence that realizes the flow of a questionnaire sequence, including conditions IfThenElse, Loop etc.. 
The ImplementedInstrument has a specific mode and is designed or adapted for a specific sample or population. Two different implemented instruments may use the same conceptual instrument. 

Measurement 

Measurements are non-question based data captures like for example blood pressure measurements, MRI images, thermometer, web-service, and experimental observations.
Measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement is a description of the components of a measurement, that can be reused by multiple or repeated studies.
The ImplementedMeasurement initiates the represented measurement so that it can be used in the data capture process. Other InstrumentComponents like Instructions and ExternalAids associated with the measurement can be linked to the implemented instrument.
The ConceptualInstrument represents the reusable components of the instrument that can have different concrete implementations. It connects to the WorkflowStepSequence that realizes the instrument flow. A WorkflowStep can be linked to a WorkflowService that involves agents and services involved in the process step.
The ImplementedInstrument is a specific implementation of a conceptual instrument.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:BooleanResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:BooleanResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a binary response, such as selected/unselected or checked/unchecked or true/false.

Explanatory notes
===================
Exactly what is captured may be dependent upon the Implemented Instrument, however the response being captured is either there or not there (ON/OFF, True/False)</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Category"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Category</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Concept whose role is to define and measure a characteristic.

Examples
==========
Self-identified as "Male".  "Extremely Satisfied" as a response category.

Explanatory notes
===================
The Category is a Concept. It can have multiple name and display label properties as well as a definition and some descriptive text. As a "Signified" class there can be one or more "Sign" classes (e.g. a Code) that denotes it with some representation. The relationship is from the Code to the Category.

DDI 3.2 mapping
=================
l:CategoryType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategoryRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategoryRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of categories within a collection. Allows for the specification of complex relationships among categories.

Examples
==========
The category of student might be described as having sub-types of primary school student and high school student.

Explanatory notes
===================
The CategoryRelationStructure employs a set of CategoryRelations to describe the relationship among concepts. Each CategoryRelation is a one to many description of connections between categories. Together they might commonly describe relationships as complex as a hierarchy. 
This is a kind of a ConceptRelationStructure restricted to categories (which are concepts).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CategorySet"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CategorySet</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Specialization of a Concept System focusing on sets of categories used as specifications for a generalized concept. Can be used directly by questions to express a set of categories for a response domain or as the related source for a CodeList or StatisticalClassification

Examples
==========
"Male" and "Female" categories in a CategorySet named "Gender"

A CategorySet for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers) without an associated Code List.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Code"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Code</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A type of Designation that relates a representation expressed as a string with or without meaningful white space to a specific classification. For use in a Code List. The representation property (Value) is expressed as it would be found in a data file. Multiple representations may relate to the same Category but should be expressed as separate Codes.

Examples
==========
The letter M might stand for the category Male in the CodeList called Gender.

Explanatory notes
===================
A Code is a kind of Designation, in particular it is the assignment of an alphanumeric string to stand in place of a category. 

It should not be confused with a ClassificationItem which is a placeholder for a position in a StatisticalClassification. It contains a Designation, for which Code is a kind; a Category; and other things. For example, in 2012 NAICS (North American Industry Classification System) one Classification Item has the Code 23 and the Category construction.

DDI 3.2 mapping
=================
l:CodeType

GSIM mapping
==============
Code</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeList"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeList</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A list of Codes and associated Categories. May be flat or hierarchical. A hierarchical structure may have an indexed order for intended presentation even though the content within levels of the hierarchy are conceptually unordered. For hierarchical structures ClassificationRelationStructure is used to provide additional information on the structure and organization of the categories. Note that a CategorySet can be structured by a ClassificationRelationStructure without the need for associating any Codes with the Categories. This allows for the creation of a CategorySet, for example for a response domain, without an associated CodeList.

Examples
==========
The codes "M" and "F" could point to "Male" and "Female" categories respectively.

A CodeList for an occupational classification system like ISCO-08 could use a ClassificationRelationStructure to describe a hierarchy (Chief Executives and Administrative and Commercial Managers as subtypes of Managers)


DDI 3.2 mapping
=================
l:CodeListType

GSIM mapping
==============
Code List</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeListResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeListResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a coded response (where both codes and their related category value are displayed) for a question. This response domain allows the single selection of one coded response.

DDI 3.2 mapping
=================
d:CodeDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:CodeRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:CodeRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of codes within a codelist. Allows for the specification of complex relationships among codes.

Explanatory notes
===================
The CodeRelationStructure employs a set of CodeRelations to describe the relationship among concepts. Each CodeRelation is a one to many description of connections between codes. Together they might commonly describe relationships as complex as a hierarchy.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ComputationAction"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ComputationAction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides an extensible framework for specific computation or transformation objects.

Examples
==========
In data processing, a ComputationAction might be a code statement in a code sequence.

In data capture, a ComputationAction might takes the form of a question, a measurement or instrument code.

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptRelationStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Relation structure of concepts within a collection. Allows for the specification of complex relationships among concepts.

Examples
==========
A concept of vacation might be described as having sub-types of beach vacation and mountain vacation.

Explanatory notes
===================
The ConceptRelationStructure employs a set of ConceptRelations to describe the relationship among concepts. Each ConceptRelation is a one to many description of connections between concepts. Together they can describe relationships as complex as a hierarchy or even a complete cyclical network as in a concept map.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptSystem"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptSystem</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A set of Concepts structured by the relations among them. [GSIM 1.1] 

Examples
==========
1) Concept of Sex: Male, Female, Other 2) Concept of Household Relationship: Household Head, Spouse of Household Head, Child of Household Head, Unrelated Household Member, etc.  

Explanatory notes
===================
Note that this structure can be used to structure Concept, Classification, Universe, Population, Unit Type and any other class that extends from Concept.

DDI 3.2 mapping
=================
c:ConceptSchemeType

GSIM mapping
==============
Concept System</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualInstrument"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Design plan for creating a data capture tool. 

Examples
==========
Design of a questionnaire regardless of mode; Design of an experiment

Explanatory notes
===================
A single ConceptualInstrument would contain workflow sequences of the intended flow logic of the instrument, which could be implemented as a web survey or paper survey, utilizing the same sequence and questions.
Similarly a single ConceptualInstrument would contain workflow sequences of the intended flow logic of the instrument, which could be implemented as a protocol delivered by a nurse or by self-administration.

Synonyms
==========
Idea; Intention; Theory; Design; LogicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ConceptualVariable"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ConceptualVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The use of a Concept as a characteristic of a UnitType intended to be measured

Examples
==========
1. Sex of person
2. Number of employees 
3. Value of endowment

Explanatory notes
===================
Note that DDI varies from GSIM in the use of a UnitType rather than a Universe. "The use of a Concept as a characteristic of a Universe intended to be measured" [GSIM 1.1]

DDI 3.2 mapping
=================
c:ConceptualVariableType

GSIM mapping
==============
Variable</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalAid"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalAid</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Any external material used in an instrument that aids or facilitates data capture, or that is presented to a respondent and about which measurements are made. 

Examples
==========
Image, link, external aid, stimulus, physical object.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:IfThenElse"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:IfThenElse</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
IfThenElse describes an if-then-else decision type of control construct. If the stated condition is met, then the associated Workflow Sequence in containsSubSeqence is triggered, otherwise the Workflow Sequence that is triggered is the one associated via elseContains.


Examples
==========
An IfThenElse object describes the conditional logic in the flow of a questionnaire or other data collection instrument, where if a stated condition is met, one path is followed through the flow, and if the stated condition is met, another path is taken.

Explanatory notes
===================
Contains a condition and two associations:
- one to the Workflow Sequence that is triggered when the condition is true (containsSubSequence), and 
- another to the Workflow Sequence that is triggered when the condition is false (elseContains). 


DDI 3.2 mapping
=================
d:IfThenElseType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ImplementedInstrument"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ImplementedInstrument</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A specific data capture tool.  ImplementedInstruments are mode and/or unit specific.

Examples
==========
Two versions of a conceptual instrument, computer assisted personal interviewing (CAPI) and mail, would be separate ImplementedInstruments. These might both reference the same ConceptualInstrument. 
A piece of equipment used to measure blood pressure.


Synonyms
==========
aka PhysicalInstrument</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceMeasurement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance measurement instantiates a represented measurement, so that it can be used as an Act in the Process Steps that define a data capture process.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstanceQuestion"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstanceQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An instance question is an instantiation of a represented question,to be used as an Act in the process steps that define a survey questionnaire.

Examples
==========
“How old are you?”</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Instruction"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Instruction</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Provides the content and description of data capture instructions. Contains the "how to" information for administering an instrument.

Examples
==========
Completion instructions in self-administered mail questionnaire, information for administering a blood pressure measurement, interviewer instructions for a CATI questionnaire, guidance for communicating between an interviewer and a respondent (note MIDUS cognitive assessment example).

DDI 3.2 mapping
=================
d:InstructionType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:InstrumentCode"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:InstrumentCode</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An InstrumentComponent that specifies the performance of a specific computation within the context of an instrument flow.

Examples
==========
quality control, edit check, checksums, compute filler text, compute values for use in administering the instrument

DDI 3.2 mapping
=================
d:ComputationItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:LevelStructure"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:LevelStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The LevelStructure describes the nesting structure of a hierarchical collection. The levels within the structure begin at the root level '1' and continue as an ordered array through each level of nesting.



Examples
==========
ISCO-08 (Major, Sub-Major, and Minor) or NAICS (2 digit sector codes, 3 digit subsector code list, 4 digit industry group code list, and 5 digit industry code list)


Explanatory notes
===================
Levels are used to organize a hierarchy. Usually, a hierarchy often contains one root member at the top, though it could contain several. These are the first Level. All members directly related to those  in the first Level compose the second Level. The third and subsequent Levels are defined similarly. 

A Level often is associated with a Concept, which defines it. These correspond to kinds of aggregates. For example, in the US Standard Occupational Classification (2010), the Level below the top is called Major Occupation Groups, and the next Level is called Minor Occupational Groups. These ideas convey the structure. In particular, Health Care Practitioners (a Major Group) can be broken into Chiropractors, Dentists, Physicians, Vets, Therapists, etc. (Minor Groups) The Categories in the Nodes at the lower Level aggregate to the Category in Node above them.

"Classification schemes are frequently organized in nested levels of increasing detail. ISCO-08, for example, has four levels: at the top level are ten major groups, each of which contain sub-major groups, which in turn are subdivided in minor groups, which contain unit groups. Even when a classification is not structured in levels ("flat classification"), the usual convention, which is adopted here, is to consider that it contains one unique level." (http://rdf-vocabulary.ddialliance.org/xkos.html#) Individual classification items organized in a hierarchy may be associated with a specific level.

DDI 3.2 mapping
=================
l:LevelType

GSIM mapping
==============
Level</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Loop"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Loop</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated a specified number of times based on one or more conditions. Inside the loop, one or more Workflow Steps are evaluated and processed in the order they appear.

Examples
==========
A loop is set to repeat a fixed number of times (initialValue). A stepValue is initially specified. At the end of the loop the current value is decremented by the stepValue. The current value might be the initialValue or it might be the current value after the initialValue has been decremented one or more times.

Explanatory notes
===================
The Workflow Sequence contained in the Loop is executed until the condition is met, and then control is handed back to the containing control construct.

Synonyms
==========
ForLoop

DDI 3.2 mapping
=================
d:LoopType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:NumericResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:NumericResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a numeric response (the intent is to analyze the response as a number) for a question.

Examples
==========
Systolic blood pressure level, as an integer from 0 to 200

DDI 3.2 mapping
=================
d:NumericDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Parameter"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Parameter</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
An Input or Output to a Process Step defined by as a unique identifier. It may be a single value or an array. 

Examples
==========
A question might have dynamic text or, again, "fills". Depending on the gender of the subject, a question might say "he" or "she" and/or "him" or "her". A gender variable is passed into the question, and question code resolves the dynamic text.
A computation action may be expecting a numeric array of values [result of looping an "Age in years" question through every member of a household]. isArray = "true"; valueRepresentation would link to a SubstantiveValueDomain defining a numeric value with a possible valid range; and because the parameter occurs in the context of a computation action it is necessary to specify an alias (e.g. AGE). The alias links the parameter to the code in the computation.

Explanatory notes
===================
When used as an hasInputParameter it defines a value being used by Process Step as a direct input or as an alias value within an equation. When used as an hasOutputParameter it defines itself as the value of the variable, capture, or explicit value of the parent class or as a specific value in a computation output by assigning the related Alias and/or defining the item within an array. Providing a defaultValue ensures that when bound to another Parameter that some value will be passed or received. A Value Domain expressed as a SubstantiveValueDomain or a SentinalValueDomain may be designated to define the datatype and range( of the expected value.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RankingResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RankingResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a ranking response which supports a "ranking" or "Ordering" of provided categories. 
Note: This item still must be modeled and is incomplete at this time.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatUntil"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatUntil</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated until a specified condition is met. After each iteration the condition is tested. If the condition is not met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatUntil loop is similar to a RepeatWhile loop, except that it tests the Boolean expression after the loop rather than before. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, in a household there is at last one person and a loop might contain a block of person questions. After the first person the last question in the block might be "Anyone else in the household"? The RepeatUntil would continue iterating until there was no-one else in the household.

DDI 3.2 mapping
=================
d:RepeatUntilType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepeatWhile"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepeatWhile</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Iterative control structure to be repeated while a specified condition is met. Before each iteration the condition is tested. If the condition is met, the associated Workflow Sequence in contains (inherited from Conditional Control Construct) is triggered. When the condition is not met, control passes back to the containing Workflow Step.

Examples
==========
A RepeatWhile loop is similar to a RepeatUntil loop, except that it tests the Boolean expression before the loop rather than after. Thus, a RepeatUntil loop always executes the loop once, whereas if the Boolean expression is initially False, a RepeatWhile loop does not execute the loop at all. For example, RepeatWhile may be used to pre-test a certain condition like if "the number of new people in a household is greater than 0" in which case a block of questions might be asked for each new person.

DDI 3.2 mapping
=================
d:RepeatWhileType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedMeasurement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedMeasurement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable non-question measurement that can be used as a template that describes the components of a measurement. A type code can be used to describe the type of measure that was used.

Examples
==========
A measure providing a geographic point; A blood pressure protocol; A protocol for measuring an ocean current

Explanatory notes
===================
Non-question measurements often involve the use of specific machines or protocols to ensure consistency and comparability of the measure. The RepresentedMeasurement allows the reusable format and protocol to be housed in a repository for use by multiple studies or repeated studies.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedQuestion"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedQuestion</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The description of a reusable question, that can be used as a template that describes the components of a question

Examples
==========
A question in a question bank such as the content and format for a question on Race for all survey/censuses fielded by U.S. agencies as prescribed by the U.S. Office of Management and Budget (OMB)

Explanatory notes
===================
A question that is repeated across waves of a panel study can be reused and also allow reference to a RepresentedVariable. A question that has been tested for consistency of response and is used by multiple studies.

DDI 3.2 mapping
=================
d:QuestionItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:RepresentedVariable"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:RepresentedVariable</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A combination of a characteristic of a universe to be measured and how that measure will be represented.


Examples
==========
The pair (Number of Employees, Integer), where "Number of Employees" is the characteristic of the population (Variable) and "Integer" is how that measure will be represented (Value Domain).

Explanatory notes
===================
Extends from ConceptualVariable and can contain all descriptive fields without creating a ConceptualVariable. By referencing a ConceptualVariable it can indicate a common relationship with RepresentedVariables expressing the same characteristic of a universe measured in another way, such as Age of Persons in hours rather than years. RepresentedVariable constrains the coverage of the UnitType to a specific Universe. In the above case the Universe with the measurement of Age in hours may be constrained to Persons under 5 days (120 hours old). RepresentedVariable can define sentinel values for multiple storage systems which have the same conceptual domain but specialized value domains.

DDI 3.2 mapping
=================
l:RepresentedVariableType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ScaleResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ScaleResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a scaled response, such as a Likert scale. 
Note: This item still must be modeled and is incomplete at this time.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SentinelValueDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SentinelValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a sentinel conceptual domain. Sentinel values are defined in ISO 11404 as
"element of a value space that is not completely consistent with a datatype's properties and characterizing operations...". A common example would be codes for missing values.

Examples
==========
Missing categories expressed as Codes &lt;-9, refused&gt;; &lt;-8, Don't Know&gt; for a numeric variable with values greater than zero.  

Explanatory notes
===================
Sentinel values are used for processing, not to describe subject matter. Typical examples include missing values or invalid entry codes. Sentinel Value Domains are typically of the enumerated type, but they can be the described type, too.

This is not to say that sentinel values carry no information. Data on gender might be enumerated by "0, male" and "1, female". These are the substantive values (see Substantive Value Domain). However, there may be the need to include missing values along with that data, such as "m, missing" and "r, refused". These are sentinel values.

ISO/IEC 11404 - General purpose datatypes, defines sentinel values in terms of how that standard defines datatypes. But, the fact that the sentinels don't fit in terms of the calculations and statistics one would perform on the "clean" data is a distinguishing characteristic. In the example above, one would not include missing or refused data in calculating a ratio of females to the total population.

Sentinel values may be described rather than enumerated. For instance, there might be a range of values, each representing an out of range value, but there could be too many to enumerate. It is easier to describe the range.

In some software missing values are represented as values not in the datatype of the valid values. R has values of NA, NaN, Inf, and -Inf. SAS and Stata have values displayed as ".", ".A" through ".Z", and "._"

Other software might use values like 999 for missing that would otherwise be the same datatype as valid values but outside the parameters of the domain.

In the gender example above:
For SPSS the sentinel values might be represented as:
998 = "refused"
999 = "not recorded"

For SAS or Stata the sentinel values might be represented as:
.R = "refused"
.N = "not recorded"

Sentinel values can also be used for other purposes beyond missing. For a numeric variable "A" might represent a value somewhere in a defined range to prevent disclosure of information about an individual. This might be considered a "semi-missing value".
In SAS or Stata for example:
.A = "greater than or equal to 100 and less than 1000 "


GSIM mapping
==============
Enumerated Value Domain</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Statement"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Statement</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Statement is a type of Instrument Component containing  human readable text or referred material. 

Examples
==========
Introductory text; Explanations; Labels, Headers, Help screens, etc.  "Thank you for agreeing to take this survey. We will start with a brief set of demographic questions." "The following set of questions are related to your household income. Please consider all members of the household and all sources of income when answering these questions."

Explanatory notes
===================
It is not directly related to another specific Instrument Component such as an InstanceQueston or InstanceMeasurement. It may be placed anywhere in a WorkflowStepSequence. 

Synonyms
==========
DDI:StatementItem

DDI 3.2 mapping
=================
d:StatementItemType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:SubstantiveValueDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:SubstantiveValueDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
The Value Domain for a substantive conceptual domain. 

Examples
==========
All real decimal numbers relating to the subject matter of interest between 0 and 1 specified in Arabic numerals. [GSIM 1.1].
The codes "M" male and "F" for female .


Explanatory notes
===================
In DDI4 the value domain for a variable is separated into “substantive” and “sentinel” values. Substantive values are the values of primary interest. Sentinel values are additional values that may carry supplementary information, such as reasons for missing. This duality is described in ISO 11404. Substantive values for height might be real numbers expressed in meters. The full value domain might also include codes for different kinds of missing values - one code for “refused” and another for “don’t know”. Sentinel Values may also convey some substantive information and at the same time represent missing values. An example might be where a numeric variable like number of employees be sometimes a count and sometimes a code representing a range of counts in order to avoid disclosure of information about a specific entity. 

The SubstantiveValueDomain may use either a ValueDescription, for described values,  or a CodeList for enumerated values, or both. 

A value domain may consist of substantive values or sentinel values. Substantive values are those associated directly with some subject matter area. They do not address concerns around processing, such as missing values. Substantive values are called "regular values" in ISO/IEC 11404 - General purpose datatypes.

The enumerated case is one where all values are listed. An example is the categorical values for gender:
The conceptual domain could consist of the concept of male and the concept of female. These might be represented in codes and associated labels as
1 (="Male")
2 (="Female")

The described case is one where some description is needed to define the set of values.
Take the following description for height in meters:
"a real number between 0 and 3, represented to two Arabic decimal places". This description might be structured in some way to be machine actionable (datatype="double", min=0, max=3, decimals=2).


Synonyms
==========
value domain [ISO11179]</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:TextResponseDomain"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:TextResponseDomain</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A response domain capturing a textual response including the length of the text and restriction of content using a regular expression.

Examples
==========
Collecting the first name on an individual in an open ended text field

DDI 3.2 mapping
=================
r:TextDomainType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:UnitType"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:UnitType</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A Unit Type is a type or class of objects of interest.

Examples
==========
Person, Establishment, Household, State, Country, Dog, Automobile

Explanatory notes
===================
UnitType is the most general in the hierarchy of UnitType, Universe, and Population. It is a description of the basic characteristic for a general set of Units.  A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.
A Unit Type is used to describe a class or group of Units based on a single characteristic with no specification of time and geography.  For example, the Unit Type of “Person” groups together a set of Units based on the characteristic that they are ‘Persons’.
It concerns not only Unit Types used in dissemination, but anywhere in the statistical process. E.g. using administrative data might involve the use of a fiscal unit. [GSIM 1.1]

Synonyms
==========
Object Class [ISO11179]

GSIM mapping
==============
Unit Type</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Universe"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Universe</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A defined set or class of people, entities, events, or objects, with no specification of time and geography, contextualizing a Unit Type

Examples
==========
1. Canadian adults (not limited to those residing in Canada)
2. Computer companies 
3. Universities

Explanatory notes
===================
Universe sits in a hierarchy between UnitType and Population, with UnitType being most general and Population most specific. A Universe is a set of entities defined by a more narrow specification than that of an underlying UnitType. A Population further narrows the specification to a specific time and geography.

If the Universe consists of people, a number of factors may be used in defining membership in the Universe, such as age, sex, race, residence, income, veteran status, criminal convictions, etc. The universe may consist of elements other than persons, such as housing units, court cases, deaths, countries, etc. A universe may be described as "inclusive" or "exclusive". 

Not to be confused with Population, which includes the specification of time and geography.

DDI 3.2 mapping
=================
c:UniverseType

GSIM mapping
==============
Population</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:WorkflowStepSequence"/>
        <Class abbreviatedIRI="ddi:DataCaptureInstrumentView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:WorkflowStepSequence</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A WorkflowStepSequence controls the order of WorkflowSteps by defining a simple sequence.

WorkflowSteps that may be used in a WorkflowStepSequence may be of many subtypes, covering simple or computational acts, conditional steps such as an IfThenElse, temporally defined ordering controls such as Split and SplitJoin, or others designed for various specializations of the WorkflowProcess. .

WorkflowSteps in a WorkflowStepSequence exchange variables and values by way of output parameters, input parameters and their bindings.


Examples
==========
A WorkflowStepSequence can be used to describe the flow of questions in a questionnaire. 

A WorkflowStepSequence can be used to decompose a BusinessProcess like data integration or anonymization into a series of steps.



Explanatory notes
===================
If more complex temporal or graph ordering is required use the subtype StructuredWorkflowSteps.
The relationship "executes" in this instance of a WorkflowControlStep is an optional means of noting the set of WorkflowSteps managed by the sequence. Sequencing is done using orderedStep. This is currently an anomoly that should be resolved in future discussion application of transformation rules from UML model. 


DDI 3.2 mapping
=================
d:SequenceType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
        <Class abbreviatedIRI="ddi:Views"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRegistryView</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Purpose:
The Agent Registry View supports the creation of a listing of Agents (Organization, Individual, Machine) for the purpose of maintenance and reuse. The listing of Agents can be organized as simple lists or in more complicated structures through the use of an AgentRelationStructure. These may be typed and provided with effective date ranges either for the whole AgentRelationStructure or for individual AgentRelations. 
Complex relationships may be described among Individuals or among Organizations or among Machines. Relationships between members of these classes may also be described.


Use Cases:
Maintaining a listing of all Organizations and Individuals related to a project or statistical activities, i.e. Individuals and Organizations related to the IPUMS projects at the Minnesota Population Center or the Departments and Individuals involved in the production of the Australian Census within the Australian Bureau of Statistics.
Organizational affiliations of Individuals. 
Collaboration networks or other social networks.


Target Audience:
Organizations working with a number of Individuals and Organizations whose descriptive information and interrelationships change over time.

Included Classes: Agent Listing, Agent Relation Structure, Organization, Individual, Machine, and External Material. 

Restricted Classes:
Concept is extended by Category, ConceptualVariable, RepresentedVariable, InstanceVariable, Population, UnitType and Universe
ExternalMaterial is extended by ExternalAid


General Documentation:
The primary class is the Agent List which can be structured by AgentRelationStructure. Agents may be of any type supported by DDI at the time of this release. Agent relationships can be defined using the adjacency list Agent Relation within AgentRelationStructure. specifying the RelationshipSpecification (Equality, Parent/Child, Whole/Part, etc.), a relevant semantic such as a specific role or relationship type, and effective time span for the relationship.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentListing"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentListing</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A listing of Agents of any type. The AgentList may be organized to describe relationships between members using AgentRelationStructure.

Examples
==========
Organizations contributing to a project. Individuals within an agency. All organizations, indivduals, and machines identified within the collections of an archive.

Explanatory notes
===================
Relationships between agents are fluid and reflect effective dates of the relationship. An agent may have multiple relationships which may be sequencial or concurrent. Relationships may or may not be hierarchical in nature. All Agents are serialized individually and brought into relationships as appropriate.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:AgentRelationStructure"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:AgentRelationStructure</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Defines the relationships between Agents in a collection. Clarifies valid period and the purpose the relationship serve

Examples
==========
An individual employed by an Organization. A unit or project (organization) within another Organization.

Explanatory notes
===================
Describes relations between agents not roles within a project or in relationship to a product. Roles are defined by the parent class and relationship name that uses an Agent as a target.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Concept"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Concept</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Unit of thought differentiated by characteristics [GSIM 1.1]

Examples
==========
Poverty, Income, Household relationship, Family, Gender, Business Establishment, Satisfaction, etc.

Explanatory notes
===================
Many DDI4 classes are subtypes of the Concept class including Category, Universe, UnitType, ConceptualVariable. This class realizes the pattern class Signified and as such a Concept can be denoted by a Sign.

DDI 3.2 mapping
=================
c:ConceptType

GSIM mapping
==============
Concept</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:ExternalMaterial"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:ExternalMaterial</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
ExternalMaterial describes the location, structure, and relationship to the DDI metadata instance for any material held external to that instance. This includes citations to such material, an external reference to a URL (or other URI), and a statement about the relationship between the cited ExternalMaterial the contents of the DDI instance. It should be used as follows:as a target object from a relationship which clarifies its role within a class; or as the target of a relatedResource within an annotation.


Examples
==========
ExternalMaterial is used to identify material and optionally specific sections of the material that have a relationship to a class. There is a generic relatedMaterial on AnnotatedIdentifiable. This should be used to attach any additional material that the user identifies as important to the class. The properties typeOfMaterial, descriptiveText, and relationshipDescription should be used to clarify the purpose and coverage of the related material.

Explanatory notes
===================
Within the DDI model, ExternalMaterial is used as an extension base for specific external materials found such as an External Aid. It is used as a base for specifically related material (e.g. ExternalAid) by creating a relationship whose name clarifies the purpose of the related material.

DDI 3.2 mapping
=================
r:OtherMaterialType</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Individual"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Individual</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A person who may have a relationship to another Agent and who may be specified as being associated with an act.

Examples
==========
Analyst performing edits on data, interviewer conducting an interview, a creator.

Explanatory notes
===================
A set of information describing an individual and means of unique identification and/or contact. Information may be repeated and provided effective date ranges to retain a history of the individual within a metadata record. Actions and relationships are specified by the use of the Individual as the target of a relationship (Creator) or within a collection of Agents in an AgentListing (employee of an Organization).</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Machine"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Machine</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
Mechanism or computer program used to implement a process.

Examples
==========
SAS program, photocopier

Explanatory notes
===================
May be used as the target to describe how an action was performed. Relevent to data capture and data processing or wherever a role is performed by a Machine.</Literal>
    </AnnotationAssertion>
    <SubClassOf>
        <Class abbreviatedIRI="ddi:Organization"/>
        <Class abbreviatedIRI="ddi:AgentRegistryView"/>
    </SubClassOf>
    <AnnotationAssertion>
        <AnnotationProperty abbreviatedIRI="rdfs:comment"/>
        <AbbreviatedIRI>ddi:Organization</AbbreviatedIRI>
        <Literal datatypeIRI="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral">Definition
============
A framework of authority designated to act toward some purpose.

Examples
==========
U.S. Census Bureau, University of Michigan/ISR, Norwegian Social Data Archive 

Explanatory notes
===================
related to org:Organization which is described as "Represents a collection of people organized together into a community or other..."</Literal>
    </AnnotationAssertion>